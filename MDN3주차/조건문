
https://developer.mozilla.org/ko/docs/Learn/JavaScript/Building_blocks/%EC%A1%B0%EA%B1%B4%EB%AC%B8

- 어떤 프로그래밍 언어든 코드는 의사결정을 내리고 입력 내용에 따라 작업을 수행해야 함
-> 예를 들어 게임에서 플레이어의 생명 수치가 0이면 게임이 종료됨
-> 날씨 앱에서는 아침에 해가 뜬 그림을 보여주고, 밤에는 달과 별을 보여줌
-> 이 문서에서는 Javascript에서 조건문이 작동하는 방법을 살펴봄 (6/15)


### 당신은 하나의 조건을 가질 수 있음

- 사람은 작은 것(과자를 하나 먹을까? 두 개 먹을까?)부터 큰 것
  (고향에서 머물면서 아버지의 농장에서 일해야 할까? 아니면 천체 물리학을 공부하러 미국으로 유학을 갈까?)
  까지 자신의 경험을 바탕으로 결정함
-> 조건문은 결정해야 하는 선택(예를 들면, 과자 하나? 두 개?)부터 선택의 결과
   (과자를 하나 먹으면 여전히 배고플 수 있고, 두 개를 먹으면 배는 부르지만, 엄마한테 과자를 다 먹었다고 혼날 수 있음)까지 
   자바스크립트에서 의사 결정을 내릴 수 있음
   
   
## if ... else 문

- 자바스크립트에서 사용하는 조건문 중에서 가장 일반적인 유형을 봄


### if ... else 문법

- if ... else 문법은 pseudocode 다음과 같음

if(condition){
   code to run if condition is true
}else{
   run some other code instead
}

- 키워드 if 뒤에 괄호가 옴
-> 시험할 조건은 괄호 안에 위치함
   이 조건은 마지막 모듈에서 논의했던 비교 연산자를 사용할 것이고
   true나 false를 리턴함
-> 내부의 중괄호 안에 코드가 있음
   이것은 우리가 좋아하는 코드일 수 있고, 조건이 true를 반환하는 경우에만 실행됨
-> 키워드 else
-> 또 다른 중괄호 안에 더 많은 코드가 있음
-> 이것은 우리가 좋아하는 코드 일 수 있고, 조건이 true가 아닌 경우에만 실행됨

- 이 코드는 사람이 읽을 수 있음
-> 만약 조건이 true면, 코드 A를 실행하고, 아니면 코드 B를 실행함

- 반드시 else와 두 번째 중괄호를 포함하지 않아도 된다는 것을 주목해야 함
-> 다음은 또한 완벽한 코드임

 if(condition){
    code to run if condition is true
 }
 
 run some other code
 
- 하지만, 여기서 조심해야 할 점
-> 위의 경우, 코드의 두 번째 블록은 조건문에 의해서 제어되지 않음
-> 그래서 조건이 true나 false를 리턴하는 것에 관계없이 항상 동작함
-> 이것이 반드시 나쁜 것은 아니지만, 원하는 대로 되지 않을 수도 있음
-> 코드의 한 블록이나 다른 블록이 실행되거나 둘 다 실행되지 않는 것을 원함

- 마지막으로, 다음과 같이 짧은 스타일로 중괄호 없이 쓰여진 if...else를 볼 수 있었음
if (condition) code to run if condition is true
else run some other code instead

- 이것은 완벽하게 유효한 코드이지만, 사용하는 것을 추천하지 않음
-> 중괄호를 사용하여 코드를 구분하고, 여러 줄과 들여쓰기를 사용한다면,
   코드를 쉽게 읽고, 진행되는 작업을 훨씬 쉽게 처리할 수 있음(6/15)
   
### 실제 예시

- 문법을 잘 이해하기 위해서 실제 예시를 알아봄
-> 어머니나 아버지가 아이에게 집안일을 도와달라고 요청한다고 상상해봄
-> 부모님께서 "우리 애기, 만약에 쇼핑 하고 가는 걸 도와주면 용돈을 더 줄게! 
              그럼 네가 원하는 걸 살 수 있을거야"라고 말씀 하신다면,
   자바스크립트에서 이것을 다음과 같이 표현할 수 있음
   
var shoppingDone = false;

if(shoppingDone === true){
   var childAllowance = 10;
}else{
   var childsAllowance = 5;
}

- 위 코드에는 항상 false를 리턴하는 shoppingDone 변수를 결과로 얻음
-> 아이에게 실망을 안겨줌
-> 아이가 부모님과 함께 쇼핑을 간다면 우리가 부모님을 위해 shoppingDone변수를
   true로 설정하는 메커니즘을 만들 수 있음
   
   
### else if

- 지난 예시에서는 두 가지 선택과 결과가 있었음
-> 하지만 우리가 두 가지보다 더 많은 선택과 결과를 원한다면?
-> 추가로 선택/결과를 if...else에 연결하는 방법이 있음

- else if를 사용하여 각 추가 선택은 if(){...}와 else{...}사이에 추가적인 블록이 필요함

<label for="weather"> Select the weather type today: </label>
<select id="weather">
   <option value= ""> --Make a choice --</option>
   <option value="sunny">Sunny</option>
   <option value="rainy">Rainy</option>
   <option value="snowing">Snowing</option>
   <option value="overcast">Overcast</option>
</select>

<p></p>

var select = document.querySelector('select');
var para = document.querySelector('p');

select.addEventListener('change', setWeather);

function setWeather(){
  var choice = select.value;
  
  if (choice === 'sunny') {
    para.textContent = 'It is nice and sunny outside today. Wear shorts! Go to the beach, or the park, and get an ice cream.';
  } else if (choice === 'rainy') {
    para.textContent = 'Rain is falling outside; take a rain coat and a brolly, and don\'t stay out for too long.';
  } else if (choice === 'snowing') {
    para.textContent = 'The snow is coming down — it is freezing! Best to stay in with a cup of hot chocolate, or go build a snowman.';
  } else if (choice === 'overcast') {
    para.textContent = 'It isn\'t raining, but the sky is grey and gloomy; it could turn any minute, so take a rain coat just in case.';
  } else {
    para.textContent = '';
  }
  
1. 여기서 우리는 HTML <select> 엘리먼트를 이용해서 다른 날씨 선택과 간단한 문단을 만들 수 있음
2. 자바스크립트에서 <select>와 <p> 엘리먼트를 모두 저장하고 있고, 
   <select> 엘리먼트에 이벤트 리스너를 추가하고, 
   값이 변할 때 setWeather() 함수가 동작함 (6/16)
   
3. 함수가 동작했을 때, 현재 <select>에서 선택된 값을 choice라는 변수에 설정함
   그런 다음 조건문을 사용하여 choice 값에 따라 문단 안에 다른 텍스트를 표시함
-> if() {...} block에서 테스트된 첫번째를 제외하고,
   else if() {...}에서 조건이 테스트되는 방법에 유의함(6/16)

4. else{...} 안의 가장 마지막 선택은 기본적으로 "최후의 수단"옵션임
-> true인 조건이 없으면 코드가 실행됨
-> 이 경우 아무것도 실행되지 않으면 예를 들어, 
   사용자가 처음에 표시한 "Make a choice" placeholder 옵션에서 다시 선택하기로 한다면,
   문단의 텍스트를 비우는 역할을 함(6/16)
   

### 비교 연산자

- 비교 연산자는 우리 조건문 안의 조건을 테스트하는 역할을 함
-> 우리는 먼저 Basic math in Javascript - numbers and operators에서 
   비교 연산자를 봄
1) === 와 !==
- 한 값이 다른 값과 같거나 다른지 테스트함
2) < 와 >
- 한 값이 다른 값보다 큰지 작은지 테스트함
3) <= 와 >=
- 한 값이 다른 값보다 작거나 같은지 크거나 같은지 테스트함

- boolean(true/false)값과 몇 번이고 다시 만날 일반적인 패턴을 테스트하는 것의
  특별한 언급을 하고 싶었음
-> false, undefined, null, 0, NaN이나 빈 문자열('')이 아닌 어떤 값은 
   조건문이 테스트 되었을 때 true를 리턴함
-> 그러므로 우리는 변수가 참인지 값이 존재하는지 간단하게 변수 이름을 사용할 수 있음(6/16)
-> 예를 들어,

var cheese = 'Cheddar';

if(cheese){
  console.log('Yay! Cheese available for making cheese on toast.');
}else{
  console.log('No cheese on toast for you today!');
}

- 그리고 부모님을 위해 집안일을 하는 아이에 대한 이전 예시에서 
  리턴하는 것을 다음과 같이 작성할 수 있음

var shoppingDone = false;

if(shoppingDone){
   var childAllowance = 10;
}else{
   var childAllowance = 5;
}


### if ... else 중첩

- if ... else 문을 다른 문 앞에 넣는 것은 완벽하게 가능함
-> 예를 들어, 온도가 무엇인지에 따라 더 많은 옵션을 보여주기 위해
   우리의 날씨 예보 어플리케이션에서 업데이트할 수 있음
   
 if(choice === 'sunny'){
   if(temparature < 86) {
     para.textContent = 'It is ' + temperature + ' degrees outside — nice and sunny. Let\'s go out to the beach, or the park, and get an ice cream.';
  } else if (temperature >= 86) {
     para.textContent = 'It is ' + temperature + ' degrees outside — REALLY HOT! If you want to go outside, make sure to put some suncream on.';
  }
}
   
- 비록 코드가 모두 동작하더라도, 
  각 if ... else문은 다른 문과 완전히 독립적으로 동작함(6/16)
  

### 논리 연산자 

- 만약 중첩된 if ... else 문을 작성하는 것 없이 다양한 조건을 테스트하길 원한다면
  logical operators이 당신을 도와줄 수 있음
-> 조건 내에서 사용될 때, 처음 두 가지는 다음과 같이 함

&& - AND - true를 리턴하는 전체 표현식을 위해 각각 true로 계산되는 
           둘 이상의 표현식을 함께 연결할 수 있음
|| - OR - true를 리턴하는 전체 표현식을 위해 하나 이상의 true로 계산되는 
          둘 이상의 표현식을 함께 연결할 수 있음(6/16)
          
- AND 예시를 위해서 앞의 예제 코드 중에서 다음과 같이 작성할 수 있음

if(choice === 'sunny' && temperature < 86){
      para.textContent = 'It is ' + temperature + ' degrees outside — nice and sunny. Let\'s go out to the beach, or the park, and get an ice cream.';
}else if(choice === 'sunny' && temperature >= 86){
       para.textContent = 'It is ' + temperature + ' degrees outside — REALLY HOT! If you want to go outside, make sure to put some suncream on.';
}

- 위 예시에서, 첫 번째 코드 블록은 choice === 'sunny'와 temperature <86가 true를 리턴한다면 실행됨

- 빠르게 OR 예시를 봄

if (iceCreamVanOutside || houseStatus === 'on fire'){
    console.log('You should leave the house quickly.');
}else{
    console.log('Probably should just stay in then.');
}

- 논리 연산자의 마지막 유형인 ! 연산자로 표현되는 NOT은 표현식을 무효화할 수 있음
-> 위 OR 예시와 함께 봄

if(!(iceCreamVanOutside || houseStatus === 'on fire')){
    console.log('Probably should just stay in then.');
}else{
    console.log('You should leave the house quickly.');
}

- 위 예시에서 OR문이 true를 리턴한다면, NOT 연산자는 전체 표현식이 false를 리턴하도록
  무효화할 것임

- 어떤 구조든지 당신이 원하는 만큼 많은 논리 문을 결합할 수 있음
-> 다음 예시는 두 가지 OR문 모두 true를 리턴하면, 전체 AND문은 true를 리턴한다는 것을
   의미하는 코드를 실행함(6/16)
   
 if(( x === 5 || y > 3 || z <= 10) && (loggedIn || userName === 'Steve'){
   // run the code
 }
 
 - 조건문에서 논리적 OR 연산자를 사용할 때 일반적인 실수는 값을 한 번 체크하는 변수를 명시한 다음,
   || OR 연산으로 분리하여 true를 리턴될 수 있는 변수의 리스트를 사용한다는 것임(6/16)
   
  if(x === 5 || 7 || 10 || 20){
     // run my code
  }
  
  - 이 경우에 if(...) 내부 조건은 7이 항상 true가 되므로,
    항상 true를 계산함
  -> 조건은 "x가 5와 같거나 7이 true면, 항상 그렇다"라고 분명하게 말하고 있음
  -> 이것은 논리적으로 우리가 원하는 것이 아님
  -> 이를 동작하게 하기 위해 우리는 각 OR 연산자를 완전하게 명시해야 함
  
  if(x === 5 || x === 7 || x === 10 || x === 20){
    // run my code
  }
   

   
   
