
https://developer.mozilla.org/ko/docs/Learn/JavaScript/Building_blocks/Looping_code

- 프로그래밍 언어는 다양한 작업을 통해 반복적인 작업을 신속하게 처리할 수 있음
-> 이제 우리는 Javscript의 반복 구문을 사용하여 편리하게 처리할 수 있음(6/16)


## 나를 계속 붙잡아라

- 반복, 반복, 반복. 그것은 프로그래밍의 중요한 개념임
-> 프로그래밍 loop는 반복적으로 동일한 작업을 반복하는 것이고,
   이것을 프로그래밍 언어로 loop라고 함(6/16)
   
- loop는 반복적인 작업을 빠르게 동일한 작업을 반복해서 수행함으로써 완료하는 것임

- 종종 코드는 각각의 연속적인 반복된 loop에서 조금씩 달라질 수 있음
-> 그래서 유사하지만 약간 다른 작업에 이것을 이용해 작업을 완료할 수도 있음(6/16)
-> 만약 너가 여러 가지 다른 종류의 계산을 해야 한다면, 반복해서 처리하는게 아닌
   각각 계산하고 싶을 것임(6/16)
   
- Loop가 왜 그렇게 좋은지 완벽하게 설명하는 예제를 한 번 봄
-> 지금 당장은 모든 코드를 이해할 필요는 없지만 실제로 100개의 원을 그리는 코드를 살펴봄

for(let i = 0 ; i < 100; i++){
    ctx.beginPath();
    ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
    ctx.arc(random(WIDTH), random(HEIGHT), random(50), 0, 2*Math.PI);
    ctx.fill();
}

- 우리는 이 코드를 100번 반복하기 위해서 loop를 사용함
-> 너는 여기에서 기본적인 아이디어를 얻을 수 있음
-> 코드의 크기가 100개가 되든 1000개가 되든 10000개가 되든간에 동일하게 작업을 수행함

- 만약 우리가 loop를 사용하지 않았다면 원을 그릴때마다 다음 코드를 반복해서 써야 함(6/16)
    ctx.beginPath();
    ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
    ctx.arc(random(WIDTH), random(HEIGHT), random(50), 0, 2*Math.PI);
    ctx.fill();


### 루프의 표준

- 특정 loop 구문을 살펴봄
-> 대부분의 시간을 보낼 첫 번째는 for loop임
-> 이 구문은 다음과 같음

 for(initializer; exit-condition; final-expression){
    // code to run
 }
 
- 여기서 우리가 알 수 있는 것:
1. for라는 키워드를 쓰고 그 옆에 괄호를 만듦
2. 괄호 안에는 세미콜론(;)으로 구분된 세 개의 항목이 있음
  (1) initializer - 일반적으로 숫자로 설정된 변수이며, 루프가 실행된 횟수가 얼마나 되는지 알기 위해 증가함
                  -> 그것을 counter variable이라고 함(6/16)
  (2) exit-condition - 앞에서 언급했듯이 loop가 언제 멈출지 정의함
                     -> 이 조건은 일반적으로 비교 연산자, 종료 조건이 충족되었는지
                        확인하는 테스트를 특징으로 하는 표현식임(6/16)
  (3) final-expression - 이것은 매번 loop 전체가 반복이 될 때 항상 분석함
                       -> 일반적으로 counter variable을 증가(혹은 감소)하여 종료 조건 값으로
                          점점 가까워짐(6/16)
3. 코드 블럭을 감싸는 중괄호({}) - 중괄호 안에 있는 코드는 loop가 반복 될때마다 실행됨(6/16)


- 실제 예제를 보면서 이러한 것들이 무엇을 더 확실하게 시각화 할 수 있는지 살펴봄

const cats = ['Bill', 'Jeff', 'Pete', 'Biggles', 'Jasmin'];
let info = 'My cats are called ';
const para = document.querySelector('p');

for(let i = 0; i < cats.length; i++){
    info += cats[i];
}

para.textContent = info;

- 이것은 배열의 항목을 반복하는데 사용되는 loop를 보여주며,
  각각의 항목을 사용하여 Javascript에서 매우 일반적인 패턴을 나타냄(6/16)
  
1. iterator i는 0에서부터 시작함(let i = 0)  
2. cats의 배열의 길이보다 작을때까지만 실행하라는 명령을 받음
   -> 이것은 중요함
   -> 종료 조건은 loop가 계속 실행되는 조건을 나타냄
   -> 따라서 이 경우에는 i < cats.length 까지만 loop가 true여서
      계속 실행됨(6/16)
3. loop 안에서 현재 loop항목(cats[i가 몇 번 실행되었던지 간에 cats[i]는)과 쉼표 및
   공백을 info 변수 끝에 위치함(6/16)
   (1) 처음 실행되는 동안 i=0 이므로 cats[0] + ', '는 info("Bill, ")에 옆에 위치함
   (2) 두번째로 실행되는 동안 i=1이므로 cats[1] + ', ' 역시 info("Jeff, ")에 옆에 위치함
   (3) 계속해서 loop가 실행될 때마다 1이 i(i++)에 추가되고, 프로세스가 다시 시작됨(6/16)
4. i의 값이 cats.length와 같아질 때, loop는 멈추고, 브라우저는 loop 아래의 다음 코드로 넘어감(6/16)

Note
: 컴퓨터는 1이 아닌 0부터 계산하기 때문에 exit 조건을 i<=cats.length이 아닌 i<cats.length로 설정함
-> 우리는 i를 0에서 시작해서, i=4(배열의 마지막 index 항목)까지 실행함
-> cats.length는 5개의 항목을 가지고 있어 5까지 반환하지만 우리는 i=5까지의 값을 원하지 않으므로,
   마지막 항목은 undefined를 반환하게 됨(6/16)
-> 그래서 index가 5인 배열 항목이 존재하지 않음
-> 그러므로 cats.length(i<=)를 쓰지 않고 cats.length(i<)로 만들었음

Note
: exit 조건의 공통적인 실수는 작거나 같다를 사용하는 것보다 동등(===)을 사용하는 것임
-> 만약 우리가 i=5까지 loop를 사용한다면 exit조건은 i<=cats.length가 되어야 함
-> 만약 우리가 i === cats.length로 설정한다면 그 loop는 전부 실행하지 않음
-> 왜냐하면 i는 첫번째 loop에서 5와 같지 않기 때문에 작업이 즉시 중단됨(6/17)

- 이상적으로 우리는 문장의 마지막에 쉼표가 없도록 마지막 loop 반복에서 연결을 변경하는 것을 원함
-> 우리는 for loop 내부에서 조건부를 넣어서 이 특별한 경우를 처리할 수 있음(6/17) 

for(let i = 0; i<cats.length; i++){
   if(i === cats.length - 1){
     info += 'and' + cats[i] + '.';
   }else{
     info += cats[i] + ', ';
   }
}


### Break을 가지고 있는 loops

- 만약 너가 모든 반복이 완료되기 전에 loop를 종료하려면 break문을 사용할 수 있음
-> 우리는 이미 이전 설명에서 switch statements를 본적이 있음
-> 입력 식과 일치하는 switch문에서 case가 충족되면 break문은 switch문을 즉시 종료하고,
   그 뒤에 코드로 이동함(6/17)
   
- 이것은 loop와 같음
-> break문은 즉시 loop를 빠져 나와 브라우저가 그 다음에 나오는 코드로 이동하게 함(6/17)

- 여러 연락처와 전화번호를 검색하여 찾고자 하는 번호만 반환하고 싶다고 해봄
-> 먼저 간단한 HTML
   우리가 검색할 이름을 입력할 수 있게 해주는 텍스트 <input>
   검색 제출을 위한 버튼 요소 <button>
   그리고 <p> 요소를 사용해 결과를 표시함(6/17)
   
<label for="search">Search by contact name: </label>
<input id="search" type="text">
<button>Search</button>

<p></p>

- 이제 Javascript를 봄

const contacts = ['Chris:2232322', 'Sarah:3453456', 'Bill:7654322', 'Mary:9998769', 'Dianne:9384975'];
const para = document.querySelector('p');
const input = document.querySelector('input');
const btn = document.querySelector('button');

btn.addEventListener('click', function(){
    let searchName = input.value;
    input.value = '';
    input.focus();
    
    for(let i = 0; i < contacts.length; i++){
      let splitContact = contacts.split(':');
      if(splitContact === searchName){
        para.textContent = splitContent[0] + '\'s number is ' + splitContent[1] + '.';
        break;
      }else{
        para.textContent = 'Contact not found.';
      }
   }
});   
   
   
1. 우선 우리는 몇 가지 변수 정의를 함
-> 우리는 각 항목(:)이 콜론으로 구분 된 이름과 전화번호를 포함하는 문자열인 정보 배열을 가지고 있음

2. 그 다음에는 버튼(btn)에 EventListener를 연결하여 버튼을 누르면 검색을 수행하고,
   결과를 반환하는 코드를 실행함
 
3. 우리는 텍스트 input에 입력한 값을 searchName이라는 변수에 저장한 다음,
   텍스트 input을 비우고, 다시 focus를 input에 맞추어 다음 검색을 준비함
   
4. 이제 재미있는 부분인 for loop
  (1) 카운터를 0에서 시작하고 카운터가 contacts.length보다 커지지 않을때까지 loop를 실행하고,
      i를 1씩 증가시킴(6/17)
  (2) loop 내부에서 먼저 콜론 문자에서 현재 연락처(contacts[i])를 나누고, 
      결과값인 두 값을 splitContact라는 배열에 저장함
  (3) 그런 다음 조건문을 사용하여 splitContact[0]에 입력된 값이 searchName과 같은지 테스트함
      이 경우 우리는 단락에 문자열을 입력하여 연락처의 번호를 알린 후, 
      break를 사용하여 loop를 종료함(6/17)
  
5. 연락처 이름(contact.length-1)을 반복한 후, 연락처 이름이 입력된 검색과 일치하지 않으면
   단락 텍스트가 "연락처를 찾을 수 없습니다."로 설정되고 반복문이 계속 반복됨(6/17)
  

   
   



