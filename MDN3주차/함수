
- 코딩에 있어서 또 하나의 중요한 개념은 바로 '함수'임
-> 함수란, 한 가지의 일을 수행하는 코드가 블럭으로 묶여 있는 것을 말함
-> 간단한 명령만으로 동일한 코드를 필요한 곳마다 반복해서 사용하지 않을 수 있게 
   만들어줌(6/29)
-> 이번 장에서는 함수에 대한 기본 문법과 파라미터(parameter) 및 범위(scope)
   그리고 호출 방법에 대해 설명함(6/29)
   
 
 ### 함수는 어디에서 찾을 수 있는가?
 
 - 자바스크립트 어디서든 함수를 찾을 수 있음
 -> 사실, 우리는 지금까지 수업에서 함수를 계속 사용해옴(6/29)
 
 ### 브라우저 내장 함수
 
 - 우리는 이 코스에서 많은 브라우저 빌트인 함수를 사용해옴
 -> 예를 들어, 우리가 매번 텍스트 string을 조작할 때마다
 
 var myText = 'I am a string';
 var newString = myText.replace('string', 'sausage');
 console.log(newString);
 
 - 또는 우리가 배열을 조작할 때마다
   
 var myArray = ['I', 'love', 'chocolate', 'frogs'];
 var madeAString = myArray.join(' ');
 console.log(madeAString);
 
 - 또는 우리가 무작위의 숫자를 생성할 때마다
 
 var myNumber = Math.random();
 
 - Javascript 언어는 당신 스스로 코드 전체를 적을 필요 없이,
   유용한 것들을 할 수 있게 해주는 많은 내장 함수를 가지고 있음
 -> 사실, 브라우저 내장 함수를 호출할 때, 호출하는 일부 코드는 Javascript로 작성할 수 없었음
 -> 이러한 함수 중 상당수는 백그라운드 브라우저 코드의 일부를 호출하고 있으며,
    이는 Javascript 웹 언어가 아니라 C++와 같은 저수준 시스템 언어로 작성됨
  
 - 몇몇 브라우저 내장 함수는 Javascript core가 아닌 브라우저 API의 일부임
 -> 브라우저 API는 기본 언어에서 더 많은 기능을 쓸 수 있게 만들어짐
 -> 브라우저 API를 다루는 법은 나중에 더 살펴보도록 함(6/29) 
 
 
 ### 함수 대 메소드
 
 - 우리가 다음으로 넘어가기 전에, 확실하게 짚고 가야할 게 있음
 -> 기술적으로, built-in browser functions은 functions이 아님
 -> 그들은 methods임
 -> 단, function과 method이 두 단어는 광범위하게 교체 가능함
 
 - 구별되는 점은 methods는 objects안에 정의된 functions라는 것임
 -> Built-in browser functions(methods)와 변수(properties)는 
    코드를 더욱 효율적이고 다루기 쉽게 하기 위해 
    구조화된 objects안에 저장되어 있음
 -> 당신은 아직 구조화된 Javascript objects의 내부 동작에 대해서까지는
    배우지 않아도 괜찮음
 -> 당신은 우리가 가르쳐 줄 objects의 내부 동작에 관한 모든 것인 모듈과
    어떻게 당신만의 모듈을 창조할 수 있는지에 대해 기다릴 수 있음(6/29)
    
 
 ### 사용자 정의 함수
 
 - 또한 지금까지 많은 사용자 정의 함수(브라우저가 아닌 코드에 정의된 함수)를 봤음
 -> 바로 뒤에 괄호가 있는 사용자가 정의한 이름을 볼 때마다, 
    바로 사용자 정의 함수를 사용하고 있었던 것임
      
 - loops article의 random-canvas-circles.html 예제에는 다음과 같은 draw()
   사용자 정의 함수가 포함되어 있음
   
  function draw(){
      ctx.clearRect(0, 0, WIDTH, HEIGHT);
      for(var i=0; i<100; i++){
        ctx.beginPath();
        ctx.fillStyle = 'rgba(255,0,0,0,5)';
        ctx.arc(random(WIDTH), random(HEIGHT), random(50), 0, 2*Math.PI);
        ctx.fill();
      }
   }
   
   - 이 함수는 <canvas> 요소 안에 100개의 임의의 원을 그림
   -> 원할 때마다 아래 코드로 함수를 호출할 수 있음
   
   draw();
   
   - 모든 코드를 또 작성하지 않아도 됨
   -> 그리고 함수는 당신이 원하는 코드를 포함할 수 있음
   -> 심지어 함수 내의 다른 함수를 불러 올 수도 있음
   -> 위의 예시는 아래와 같이 정의된 코드를 random()을 통해 세 번이나 호출하고 있음
   
   function random(number){
       return Math.floor(Math.random()*number);
   }
   
   function random(number){
       return Math.floor(Math.random()*number);
   }
   
   - Math.random()라는 내장함수는 오직 0과 1사이의 소수를 생성해내기 때문에,
     우리는 위의 함수가 필요했음
   -> 우리는 0과 특정 수 사이의 무작위한 정수를 원함(6/29)
   
   
  ### 함수 호출
  
  - 정의된 함수를 작동시키기 위해선 함수를 '호출'해야 함
  -> 함수 호출은 함수의 이름을 괄호와 함께 코드 내에 적어 주면 됨(6/29)
  
  function myFunction(){
      alert('hello');
  }
  
  myFunction()
  
  
  ### 익명 함수
  
  - 당신은 조금 다른 방식으로 정의되거나 호출되는 함수를 본 적 있음
  -> 이제까지 우리는 이런 식으로 함수를 생성함(6/29) 
  
  function myFunction(){
     alert('hello');
  }
  
  - 하지만 이름 없는 함수 또한 만들 수 있음
  
  function(){
     alert('hello');
  }
  
  - 이건 익명 함수라고 부름
  -> 이름이 없다는 뜻임
  -> 익명 함수는 주로 이벤트 핸들러와 사용됨
  -> 아래의 예시는 함수 내의 코드가 버튼을 클릭함에 따라 작동한다는 걸 보여줌(6/29)
  
  var myButton = document.querySelector('button');
  
  myButton.onclick = function(){
     alert('hello');
  }
  
  - 위의 예시는 페이지 상의 클릭을 위해 <button> 요소를 필요로 함
  -> 당신은 코스를 거치며 이런 구조의 코드를 꽤 봐옴
  
  - 당신은 변수 속에 익명함수를 넣을 수 있음
  
  var myGreeting = function(){
      alert('hello');
  }
  
  - 이 함수는 이런 식으로 호출됨
  
  myGreeting();
  
  - 이 방법은 효과적으로 함수에 이름을 부여하고 있음
  -> 당신은 다중 변수들에 함수를 할당할 수 있음.
     예를 들면,
     
  var anotherGreeting = function(){
      alert('hello');
  }
  
  - 이제 함수는 이런 식으로도 호출이 가능함
  
  myGreeting();
  anotherGreeting();
  
  - 함수를 만들 땐 아래의 형태를 고수하는게 나음
 
  function myGreeting(){
     alert('hello');
  }
  
  myButton.onclick = function(){
     alert('hello');
  }
  
  
  ### 매개변수
  
  - 몇몇 함수는 호출을 위해 매개변수를 필요로 하는 경우가 있음
  -> 이런 함수가 제대로 작동하기 위해선 함수 괄호 안에 값들을 넣어주어야 함
  
  - 예를 들어, 내장 함수인 Math.random()은 어떤 매개변수도 필요로 하지 않음
  -> 이 함수는 호출되면 늘 0과 1사이의 무작위 수를 반환해줌 (6/29) 
  
  var myNumber = Math.random();
  
  - 하지만 내장 함수 replace()는 두 개의 매개변수를 필요로 함
  -> 대체될 문자와 대체할 문자임
  
  var myText = 'I am a string';
  var newString = myText.replace('string', 'sausage');
  
  - 매개변수는 이따금 선택 사항이기도 함
  -> 당신이 명시해 줄 필요가 없다는 뜻임
  -> 그런 경우, 일반적으로 함수는 디폴트 기능을 수행함
  
  var myArray = ['I', 'love', 'chocolate', 'frogs'];
  var madeAString = myArray.join(' ');
  var madeAString = myArray.join();
  
  - 만일 결합의 기준이 될 매개변수가 없다면, 콤마가 매개변수로서 사용됨(6/29)
  
  
  ### 함수 스코프와 충돌
  
  - '스코프'는 함수와 관련된 매우 중요한 개념임
  -> 함수를 생성할 때, 변수 및 함수 내 정의된 코드들은 그들만의 '스코프'안에 자리하게 됨
  -> 그 말인 즉슨, 다른 함수의 내부와 외부 함수의 코드가 접근할 수 없는 그들만의 구획에 
     갇혀 있다는 뜻임
  -> 함수 바깥에 선언된 가장 상위 레벨의 스코프를 전역 스코프(global scope)라고 부름
  -> 전역 스코프 내에 정의된 값들은 어느 코드든 접근이 가능함(6/29) 
  
  - 자바스크립트는 다양한 이유로 인해 이와 같은 기능을 제공함
  -> 주로는 안전성과 구조 때문임
  -> 어떤 때에는 당신의 변수가 어느 코드나 접근 가능한 변수가 되는 걸 원치 않음
  -> 당신이 어딘가에서 불러온 외부 스크립트가 문제를 일으킬 수도 있음
  -> 외부 스크립트의 코드와 같은 변수 이름을 사용하면 충돌이 일어남(6/29) 
  
  - 예를 들어, 당신에게 두 개의 외부 자바스크립트 파일을 호출하는 HTML이 있다고 침
  -> 그 둘은 같은 이름으로 정의된 변수와 함수를 사용하고 있음(6/29)
  
  <script src="first.js"></script>
  <script src="second.js"></script>
  <script>
    greeting();
  </script>
  
  // first.js
  var name = 'Chris';
  function greeting(){
     alert('Hello ' + name + ': welcome to our company.');
  } 
  
  // second.js
  var name = 'Zaptec';
  function greeting(){
      alert('Our company is called ' + name + '.');
   }
   
  - 두 함수 모두 greeting()이라고 불리지만, 
    당신은 second.js 파일의 greeting() 함수에만 접근 가능함
  -> HTML 소스 코드 상 후자이므로, 그 파일의 변수와 기능이 first.js 것을 덮어씀(6/29)
  
  
  ### 실습: 스코프랑 놀자
  
  - 스코프 사용의 실례를 한 번 봄
  
  1. 우선, function-scope.html의 로컬 copy를 만듦
  -> 이것은 두 개의 함수인 a()와 b(), 그리고 세 개의 변수인 x,y,z를 갖고 있음
     세 개의 변수 중 2개는 함수 안에 정의되어 있음(6/29) 
     나머지 하나는 전역 scope에 있음
  -> 이것은 또한 세 번째 함수인 output()을 포함하고,
     output()은 하나의 변수를 갖고, paragraph의 page에 output을 나타냄 
     
  2. 예시를 browser와 당신의 text editor에서 열음 (6/29)
  
  3. 개발자 툴을 열고, 자바스크립트 콘솔에서 아래의 command를 입력함
     output(x);
  -> 당신은 variable x의 값이 스크린에 결과로 나오는 것을 봐야 함(6/29)
  
  4. 이제 아래의 것을 콘솔에 입력함
     output(y);
     output(z);
  -> 두 개는 각각 ReferenceError: y is not defined를 리턴해야 함
  -> 왜냐하면 y와 z는 각각 a(), b()의 안에 있으므로,
     output()이 전역 scope에서 그것을 부를 때, 접근할 수 없기 때문임
  
  5. 그러나 만약 안쪽에서 부른다면 어떻게 하겠는가?
     a()와 b()를 다음과 같이 수정함(6/29)
     
     function a(){
       var y = 2;
       output(y);
     }
     
     function b(){
       var z = 3;
       output(z);
     }
     
   -> 코드를 저장하고, 브라우저에서 다시 로드함
   -> 그리고 a(),b()를 자바스크립트 콘솔에서 호출함
   
   -> 당신은 y와 z값의 결과를 페이지에서 봐야 함
      이것은 잘 동작함. 왜냐하면 output() 함수가 다른 함수의 내부에서 호출되기 때문임
      Output() 자신은 어느 곳에서나 동작 가능함.
      왜냐하면 이것은 global scope로 정의되었기 때문임(6/29)
   
   6. 이제 당신의 코드를 다음과 같이 업데이트 함
      function a(){
         var y = 2;
         output(x);
       }
       
      function b(){
         var z = 3;
         output(x);
      }
   7. 저장하고 다시 로드함.
      그리고 이것을 당신의 Javascript console에서 시도함
      a();
      b();
      
   8. a()와 b() 모두 x의 값을 호출해야 함
     -> 이것은 잘 동작하는데, 이것은 x가 전역 변수이기 때문임
     
   9. 마지막으로, 당신의 코드를 다음과 같이 업데이트 함
   
      function a(){
        var y = 2;
        output(z);
      }
      
      function b(){
        var z = 3;
        output(y);
      }
      
   10. 저장하고 다시 로드함. 그리고 Javascript console에서 시도해 봄(6/29)
    
       a();
       b();
       
   -> 이번에는 a()와 b()모두 ReferenceError를 발생시킴
      그것은 왜냐하면 output()이 같은 범위에 정의되지 않은 변수를 호출하기 때문임
   -> 변수는 해당 함수 호출에 보이지 않음(6/29) 
   
   
  
  
  
  
  
  
