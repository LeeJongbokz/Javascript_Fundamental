
- 코딩에 있어서 또 하나의 중요한 개념은 바로 '함수'임
-> 함수란, 한 가지의 일을 수행하는 코드가 블럭으로 묶여 있는 것을 말함
-> 간단한 명령만으로 동일한 코드를 필요한 곳마다 반복해서 사용하지 않을 수 있게 
   만들어줌(6/29)
-> 이번 장에서는 함수에 대한 기본 문법과 파라미터(parameter) 및 범위(scope)
   그리고 호출 방법에 대해 설명함(6/29)
   
 
 ### 함수는 어디에서 찾을 수 있는가?
 
 - 자바스크립트 어디서든 함수를 찾을 수 있음
 -> 사실, 우리는 지금까지 수업에서 함수를 계속 사용해옴(6/29)
 
 ### 브라우저 내장 함수
 
 - 우리는 이 코스에서 많은 브라우저 빌트인 함수를 사용해옴
 -> 예를 들어, 우리가 매번 텍스트 string을 조작할 때마다
 
 var myText = 'I am a string';
 var newString = myText.replace('string', 'sausage');
 console.log(newString);
 
 - 또는 우리가 배열을 조작할 때마다
   
 var myArray = ['I', 'love', 'chocolate', 'frogs'];
 var madeAString = myArray.join(' ');
 console.log(madeAString);
 
 - 또는 우리가 무작위의 숫자를 생성할 때마다
 
 var myNumber = Math.random();
 
 - Javascript 언어는 당신 스스로 코드 전체를 적을 필요 없이,
   유용한 것들을 할 수 있게 해주는 많은 내장 함수를 가지고 있음
 -> 사실, 브라우저 내장 함수를 호출할 때, 호출하는 일부 코드는 Javascript로 작성할 수 없었음
 -> 이러한 함수 중 상당수는 백그라운드 브라우저 코드의 일부를 호출하고 있으며,
    이는 Javascript 웹 언어가 아니라 C++와 같은 저수준 시스템 언어로 작성됨
  
 - 몇몇 브라우저 내장 함수는 Javascript core가 아닌 브라우저 API의 일부임
 -> 브라우저 API는 기본 언어에서 더 많은 기능을 쓸 수 있게 만들어짐
 -> 브라우저 API를 다루는 법은 나중에 더 살펴보도록 함(6/29) 
 
 
 ### 함수 대 메소드
 
 - 우리가 다음으로 넘어가기 전에, 확실하게 짚고 가야할 게 있음
 -> 기술적으로, built-in browser functions은 functions이 아님
 -> 그들은 methods임
 -> 단, function과 method이 두 단어는 광범위하게 교체 가능함
 
 - 구별되는 점은 methods는 objects안에 정의된 functions라는 것임
 -> Built-in browser functions(methods)와 변수(properties)는 
    코드를 더욱 효율적이고 다루기 쉽게 하기 위해 
    구조화된 objects안에 저장되어 있음
 -> 당신은 아직 구조화된 Javascript objects의 내부 동작에 대해서까지는
    배우지 않아도 괜찮음
 -> 당신은 우리가 가르쳐 줄 objects의 내부 동작에 관한 모든 것인 모듈과
    어떻게 당신만의 모듈을 창조할 수 있는지에 대해 기다릴 수 있음(6/29)
    
 
 ### 사용자 정의 함수
 
 - 또한 지금까지 많은 사용자 정의 함수(브라우저가 아닌 코드에 정의된 함수)를 봤음
 -> 바로 뒤에 괄호가 있는 사용자가 정의한 이름을 볼 때마다, 
    바로 사용자 정의 함수를 사용하고 있었던 것임
      
 
 
