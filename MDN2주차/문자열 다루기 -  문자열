
https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/Strings

- 다음으로 프로그래밍에서 어떤 텍스트가 호출되는지 문자열에 대해 알아봄
-> 이 게시물에서는 문자열 작성, 문자열의 따옴표 이스케이프 및 문자열 결합과 같이 
   Javascript를 배울 때 문자열에 관해 알아야 할 모든 일반적인 사항을 살펴봄(6/12) 

-> 문자열 작성, 문자열의 따옴표 이스케이프 및 문자열 결합과 같이
   Javascript를 배울 때 문자열에 관해 알아야 할 모든 일반적인 사항을 살펴봄(6/15)
   

### 단어의 힘

- 단어는 인간이 커뮤니케이션 함에 있어 커다란 부분이라고 할 수 있기에 매우 중요함
-> 웹은 사람들이 정보를 교환하고 공유할 수 있도록 설계된 텍스트 기반의 매체이므로,
   웹에 표시되는 단어를 제어하는 것이 유용함 
 
+ 단어는 인간이 커뮤니케이션 함에 있어 커다란 부분이라고 할 수 있기에 매우 중요함
-> 웹은 사람들이 정보를 교환하고 공유할 수 있도록 설계된 텍스트 기반의 매체임
-> 웹에 표시되는 단어를 제어하는 것이 유용함(6/15)
   
- HTML은 텍스트에 구조와 의미를 제공하며, CSS는 텍스트에 스타일을 적용할 수 있게 해주며,
  Javascript는 문자열을 조작하기 위한 여러 가지 기능 등 다양한 작업을 수행할 수 있음
-> 지금까지 우리가 여러분에게 보여줬던 거의 모든 프로그램은 문자열 조작과 관련이 있음(6/12) 

+ HTML은 텍스트에 구조와 의미를 제공하며, CSS는 텍스트에 스타일을 적용할 수 있게 해주며,
  Javascript는 문자열을 조작하기 위한 여러 가지 기능 등 다양한 작업을 수행할 수 있음
-> 지금까지 우리가 여러분에게 보여줬던 거의 모든 프로그램은 문자열 조작과 관련이 있음(6/15)  

### 문자열 만들기

- 먼저 아래의 명령어를 입력함

var string = 'The revolution will not be televised';
string

+ 먼저 아래의 명령어를 입력함

var string = 'The revolution will not be televised';
string

- 숫자에서 했던 것과 같게, 우리는 변수를 선언하고, 문자열을 초기화하고, 값을 반환함
-> 차이점은 오직 숫자 대신 문자열을 넣었고, 문자열 값을 따옴표로 감싸 주었음

+ 숫자에서 했던 것과 같게, 우리는 변수를 선언하고, 문자열을 초기화하고, 값을 반환함
-> 차이점은 오직 숫자 대신 문자열을 넣었고, 문자열 값을 따옴표로 감싸주었음
+ 차이점은 따옴표로 감싸준다는 점임(6/15)

- 따옴표를 빼거나 잘못쓰면 에러가 뜸. 아래의 코드를 입력해봄

+ 따옴표를 빼거나 잘못쓰면 에러가 뜸.
+ 아래의 코드를 입력해봄(6/15)

var badString = This is a test;
var badString = This is a test';
var badString = 'This is a test;

var badString = This is a test;
var badString = This is a test';
var badString = 'This is a test;

- 따옴표로 감싸져 있지 않은 텍스트는 변수 이름, 속성 이름, 예약어와 유사하다고 가정하기 때문에
  이러한 코드는 작동하지 않음
-> 만약 브라우저가 찾을 수 없다면 에러가 발생함(ex) "missing; before statement');
-> 만약 브라우저가 문자열이 시작하는 곳은 볼 수 있지만, 끝나는 곳을 찾지 못하면 에러를 던짐 (ex) unterminated string literal)
-> 만약 당신의 프로그램이 에러를 계속 만들어낸다면, 다시 돌아가 당신의 문자열에 빠진 따옴표가 없는지 찾아봄(6/12) 

+ 따옴표로 감싸져 있지 않은 텍스트는 변수 이름, 속성 이름, 예약어와 유사하다고 가정하기 때문에
  이러한 코드는 작동하지 않음
-> 만약 브라우저가 찾을 수 없다면 에러가 발생함
-> 만약 브라우저가 문자열이 시작하는 곳은 볼 수 있지만, 끝나는 곳을 찾지 못하면 에러를 던짐
   ex) unterminated string literal
-> 만약 당신의 프로그램이 에러를 계속 만들어낸다면, 다시 돌아가 당신의 문자열에 빠진 따옴표가 없는지 찾아봄(6/15)

- 다음의 코드는 당신이 변수 string을 선언했다면 작동할 것임
-> 아래의 코드를 입력해 봄

+ 다음의 코드는 당신이 변수 string을 선언했다면 작동할 것임
+ 아래의 코드를 입력해 봄 

var badString = string;
badString;

+ var badString = string;
+ badString;

-> badString은 이제 string과 같은 값으로 설정됨

+ badString은 이제 string과 같은 값으로 설정됨(6/15)

### 따옴표 vs 쌍따옴표

- 자바스크립트에서는 따옴표와 쌍따옴표가 모두 허용됨
-> 다음의 코드는 문제 없이 작동함

+ 자바스크립트에서는 따옴표와 쌍따옴표가 모두 허용됨
+ 다음의 코드는 문제 없이 작동함(6/15)

var sgl = 'Single Quotes';
var dbl = "Double Quotes";
sgl;
dbl;

var sgl = 'Single Quotes';
var dbl = "Double Quotes";
sgl;
dbl;


- 따옴표와 쌍따옴표는 차이점이 거의 없어, 편한대로 사용할 수 있음
-> 하지만 당신은 문자열을 감싸는데 한 종류의 따옴표만 사용해야 하며,
   그렇지 않으면 에러가 발생함
-> 아래의 코드를 실행해봄

+ 따옴표와 쌍따옴표는 차이점이 거의 없어, 편한대로 사용할 수 있음
+ 하지만 당신은 문자열을 감싸는데 한 종류의 따옴표만 사용해야 하며,
  그렇지 않으면 에러가 발생함
-> 아래의 코드를 실행해봄(6/15) 

var badQuotes = 'What on earth?";

+ var badQuotes = 'What on earth?";

- 브라우저는 다른 종류의 따옴표가 감싸고 있어 문자열이 아직 끝나지 않았다고 생각함
-> 예를 들어, 아래 두 가지 모두 괜찮음

+ 브라우저는 다른 종류의 따옴표가 감싸고 있어,
  문자열이 아직 끝나지 않았다고 생각함(6/15)
-> 예를 들어, 아래 두 가지 모두 괜찮음

var sglDbl = 'Would you eat a "fish supper"?';
var dblSgl = "I'm feeling blue.";
sglDbl;
dblSgl;

+ var sglDbl = 'Would you eat a "fish supper"?';
var dblSgl = "I'm feeling blue.";
sglDbl;
dblSgl;

- 하지만 당신은 같은 종류의 따옴표를 문자열에 포함시킬 수 없음
-> 브라우저는 어느 따옴표가 문자열이 끝났다는 것을 알리는지 혼돈하게 됨

+ 하지만 당신은 같은 종류의 따옴표를 문자열에 포함시킬 수 없음
+ 브라우저는 어느 따옴표가 문자열이 끝났다는 것을 알리는지 혼돈하게 됨

var bigmouth = 'I've got no right to take my place...';


### 문자열 이스케이프 문자

- 직전의 문제의 코드를 해결하기 위해, 우리는 따옴표를 이스케이프 문자로 만들어야 함
-> 이스케이프 문자란 어떤 한 문자를 코드가 아닌 문자열로 만들어주는 문자임

+ 직전의 문제의 코드를 해결하기 위해, 우리는 따옴표를 이스케이프 문자로 만들어야 함
+ 이스케이프 문자란 어떤 한 문자를 코드가 아닌 문자열로 만들어주는 문자임(6/15)

var bigmouth = 'I\'ve got no right to take my place...';
bigmouth;
-> 이것은 에러가 일어나지 않음
-> 당신은 \"와 같게도 사용할 수 있음

+ var bigmouth = 'I\'ve got no right to take my place...';
bigmouth;
-> 이것은 에러가 일어나지 않음
-> 당신은 \"와 같게도 사용할 수 있음(6/15) 


### 문자열 연결하기

- 'Concatenate'는 '결합'을 의미하는 프로그래밍 단어임
-> 자바스크립트에서 문자열을 함께 결합하려면 숫자를 더할 때 사용하는 것과 동일한
   더하기(+) 연산자를 사용하지만 이 상황에서는 다른 작업을 수행함
-> 콘솔에 예를 들어보겠음

+ 'Concatenate'는 '결합'을 의미하는 프로그래밍 단어임
+ 자바스크립트에서 문자열을 함께 결합하려면 숫자를 더할 때 사용하는 것과 동일한
  더하기(+) 연산자를 사용하지만 이 상황에서는 다른 작업을 수행함

var one = 'Hello, ';
var two = 'how are you?';
var joined = one + two;
joined;

var one = 'Hello, ';
var two = 'how are you?';
var joined = one + two;
joined;

-> 변수 joined의 값은 "Hello, how are you?"임
+ 변수 joined의 값은 "Hello, how are you?"임(6/15)


- 마지막 예에서는 그저 두 개의 문자열을 결합했을 뿐이지만 각 문자열 사이에 +를 
  포함하기만 하면 원하는 만큼의 문자열을 결합할 수 있음
-> 다음을 시도해봄

+ 마지막 예에서는 그저 두 개의 문자열을 결합했을 뿐이지만
  각 문자열 사이에 +를 포함하기만 하면 
  원하는 만큼의 문자열을 결합할 수 있음(6/15)


var multiple = one + one + one + one + two;
multiple;

var multiple = one + one + one + one + two;
multiple

- 또한 변수와 실제 문자열을 혼합하여 사용할 수도 있음
-> 다음을 시도해봄
var response = one + "I am fine - " + two;
response;

+ 또한 변수와 실제 문자열을 혼합하여 사용할 수도 있음
-> 다음을 시도해봄

var response = one + "I am fine - " + two;
response;

var response = one + "I am fine - " + two;
response;


### 문자열의 연결

- 실제 작업에 사용되는 연결 방법에 대해 살펴봄
-> 이 과정에 앞부분의 예는 다음과 같음

+ 실제 작업에 사용되는 연결 방법에 대해 살펴봄
+ 이 과정에 앞부분의 예는 다음과 같음(6/15) 


<button> Press me </button>

var button = document.querySelector('button');

button.onclick = function(){
   var name = prompt('What is your name?');
   alert('Hello ' + name + ' , nice to see you!');
}

- 여기서 우리는 Window.prompt()를 4번째 줄에 쓰는데,
  그것은 팝업 대화 상자를 통해 질문에 응답하도록 요청한 
  다음 지정된 변수 내에 입력하는 텍스트를 저장함
-> 이 경우에는 name을 저장함
-> 우리는 Window.alert()을 5번째 줄에 사용하여 
   두 개의 문자열 리터럴 및 변수의 값이 포함된 다른 팝업을 표시함(6/12) 

<button> Press me </button>

var button = document.querySelector('button');

button.onclick = function(){
   var name = prompt('What is your name?');
   alert('Hello ' + name + ' , nice to see you!');
}

- 여기서 우리는 window.prompt()를 4번째 줄에 쓰는데,
  그것은 팝업 대화 상자를 통해 질문에 응답하도록 요청한 다음
  지정된 변수 내에 입력하는 텍스트를 저장함
-> 이 경우에는 name을 저장함
-> 우리는 Window.alert()를 5번째 줄에 사용하여
   두 개의 문자열 리터럴 및 변수의 값이 포함된 다른 팝업을 표시함(6/15) 
   
   
   
   
 ### 숫자+문자열
 
 1. 그러면 문자열과 숫자를 추가하면 어떻게 될까?
 -> 콘솔에서 사용해보겠음
 
 + 그러면 문자열과 숫자를 추가하면 어떻게 될까?
 -> 콘솔에서 사용해보겠음(6/15) 
 
 Front + '242';
 
 + Front + '242';
 
 -> 이 경우 오류가 발생할 것으로 예상할 수 있지만 잘 작동함
 -> 숫자로 문자열을 나타내려는 것은 말이 안되지만 숫자를 문자열로 표현하는 것은 의미가 있음
 -> 그래서 브라우저는 숫자를 문자열로 변환하고 두 문자열을 서로 연결시킴
 
 + 이 경우 오류가 발생할 것으로 예상할 수 있지만 잘 작동함
 + 숫자로 문자열을 나타내려는 것은 말이 안되지만 숫자를 문자열로 표현하는 것은 의미가 있음
 + 그래서 브라우저는 숫자를 문자열로 변환하고 두 문자열을 서로 연결시킴(6/15) 
 
 2. 숫자 두 개로도 연결할 수 있음
 -> 따옴표로 감싸면 숫자를 강제로 문자열로 만들 수 있음
 -> 아래 코드를 실행해봄
 -> 아래 코드에서 변수가 숫자인지 문자열인지 확인하기 위해 typeof 연산자를 활용함
 
 +  숫자 두 개로도 연결할 수 있음
 + 따옴표로 감싸면 숫자를 강제로 문자열로 만들 수 있음
 + 아래 코드를 실행해봄
 + 아래 코드에서 변수가 숫자인지 문자열인지 확인하기 위해 typeof 연산자를 활용함
 
 var myDate = '19' + '67';
 myDate
 
 var myDate = '19' + '67';
 myDate
 
 3. 만약 코드에 문자열로 바꾸고 싶은 숫자형 변수가 있지만,
    변수 자체의 값을 바꾸고 싶지 않거나,
    숫자로 바꾸고 싶은 문자열이 있지만 변수 자체의 값을 바꾸고 싶지 않으면
    아래와 같은 생성자를 사용할 수 있음
    
 + 만약 코드에 문자열로 바꾸고 싶은 숫자형 변수가 있지만,
   변수 자체의 값을 바꾸고 싶지 않거나,
   숫자로 바꾸고 싶은 문자열이 있지만 변수 자체의 값을 바꾸고 싶지 않으면,
   아래와 같은 생성자를 사용할 수 있음(6/15) 
    
 - Number 객체는 가능하면 어떤 입력값이든 숫자로 바꿈
 -> 다음 코드를 실행해봄
 
 var myString = '123';
 var myNum = Number(myString);
 typeof myNum;
 
 var myString = '123';
 var myNum = Number(myString);
 typeof myNum;
 
 - 반면, 모든 숫자는 toString()이라는 함수를 가지고 있음
 -> 이 함수는 숫자를 동등한 문자열로 변환함
 -> 다음 코드를 실행해봄
 
 + 반면, 모든 숫자는 toString()이라는 함수를 가지고 있음
 + 이 함수는 숫자를 동등한 문자열로 변환함
 + 다음 코드를 실행해봄(6/15)
 
 var myNum = 123;
 var myString = myNum.toString();
 
 var myNum = 123;
 var myString = myNum.toString(); 
 
 - 예를 들어, 만약 어떤 사용자가 숫자를 텍스트 필드 폼에 입력한다면,
   그 입력 값은 문자열일 것임
 -> 하지만 만약 여러분이 이 숫자를 어떤 값에다 더하고 싶다면,
    이 입력 값을 숫자로 변환해야 함
 -> 이 경우에 Number()에 이 값을 넘겨줘서 이 문제를 해결할 수 있음(6/12) 
 
 + 예를 들어, 만약 어떤 사용자가 숫자를 텍스트 필드 폼에 입력한다면,
   그 입력 값은 문자열일 것임
 -> 하지만 만약 여러분이 이 숫자를 어떤 값에다 더하고 싶다면,
    이 입력 값을 숫자로 변환해야 함
 -> 이 경우에 Number()에 이 값을 넘겨줘서 이 문제를 해결할 수 있음(6/15) 
 
 
 ### 마치며
 
 - 여기까지 자바스크립트에서 다루는 문자열의 기본이었음

 + 여기까지 자바스크립트에서 다루는 문자열의 기본이었음(6/15) 
    
 




