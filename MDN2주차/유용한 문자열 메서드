https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/Useful_string_methods


- 이제까지 문자열의 기초를 살펴보았음
-> 이제부터 '텍스트 문자열의 길이 찾기, 문자열 합치기 및 쪼개기 등과 같은' 내장된 메서드를 사용하여
   문자열에서 수행할 수 있는 유용한 작업에 대해 생각해봄
-> 문자열의 한 문자를 다른 문자로 대체하는 등의 작업을 수행함(6/15)    


## Strings as objects

- 이전에 말했지만, 다시 말하면 Javascript의 모든 것이 객체임

+ 왜 Javascript의 모든 것은 객체일까?
-> 객체를 활용해서 다양한 연산을 수행하기 위함이다. 

  문자열을 만들 때, 예를 들면
    
  var string = 'This is my string';
  
- 변수가 문자열 객체 인스턴스되면, 결과적으로 수많은 속성과 메서드가 사용가능함

+ 왜 변수가 문자열 객체 인스턴스가 되면 결과적으로 수많은 속성과 메서드가 사용가능한가?
-> String 객체 페이지로 이동하여 페이지 측면의 목록을 내려다 보면 이것을 볼 수 있음


### 문자열의 길이 찾기

- 간단함
-> 간단하게 length 프로퍼티를 사용할 수 있음
-> 다음 코드를 입력해봄 

var browserType = 'mozillla';
browserType.length;

- 결과는 7을 리턴해야 함
-> 'mozilla'는 7글자이기 때문임
-> 이것은 여러 가지 이유로 유용함
-> 예를 들어, 이름의 길이에 따라 이름의 순서를 정렬해야 하던가,
   유저가 작성한 이름이 특정 길이 이상일 때, 너무 길다는 것을 알려줘야 하는 경우에 
   사용할 수 있음(6/15)
  
  
### 특정 문자열 찾기

- 관련하여 대괄호 표기법을 이용해서 문자열 안의 문자를 구할 수 있음
-> 대괄호 표기법은 변수명 끝에 대괄호를 포함함 (6/15)
-> 대괄호 안에는 구하고 싶은 문자의 숫자를 포함시키면 되며,
   예를 들어 아래의 경우 첫 번째 문자를 구할 수 있음(6/15)

   browserType[0];

- 컴퓨터는 1이 아니라 0부터 숫자를 셈
-> 문자열의 마지막 문자를 구하기 위해서, 우리는 다음 코드를 사용할 수 있으며,
   기술적인 length 프로퍼티와 같이 사용하면 아래와 같음
   
   browserType[browserType.length-1];
   
- "mozilla"는 7글자이지만, 숫자는 0부터 시작하기 때문에 글자의 위치는 6임
-> 그렇기 때문에 length-1을 사용함
-> 예를 들어, 여러 문자열 중 첫 번째 문자를 찾아 알파벳순으로 정렬해야할 경우에
   사용할 수 있음(6/15)
   
   
### 문자열 내부의 하위 문자열 찾기 및 추출

- 때때로 큰 문자열 안의 작은 문자열을 찾고 싶음
-> 이 작업은 indexOf()를 사용하여 완료할 수 있음
   browserType.indexOf('zilla');

- 결과는 2임
-> 하위 문자열인 "zilla"는 "mozilla"의 2번 위치에서 시작함
-> 이러한 코드는 문자열을 필터링하는데 사용될 수 있음
-> 예를 들어, 웹 주소 목록에서 "mozilla"가 포함된 주소만 인쇄하고 싶은 경우임

- 다른 방법으로도 할 수 있으며, 더욱 효율적일 수 있음
-> 다음 예제를 따라해봄 
   browserType.indexOf('vanilla');
-> 이렇게 하면 -1의 결과를 얻을 수 있음
-> -1의 결과를 얻는 이유는 vanilla가 기본 문자열에서 발견되지 않기 때문임(6/15)

- 하위 문자열 'mozilla'가 포함되지 않은 문자열의 모든 인스턴스를 찾으려면
  이 연산자를 사용하고 아래에 표시된 것처럼 부정 연산자를 사용해서
  작업을 수행할 수 있음
-> 다음과 같이 할 수 있음
   if(browserType.indexOf('mozzila') !== -1){
   }
   
- 문자열 내에서 부분 문자열이 어디에서 시작되고 어떤 문자로 끝나는지 알고 싶으면
  slice()를 사용하여 문자열을 추출할 수 있음
 
  browserType.slice(0, 3);

-> "moz"를 반환함
-> 첫 번째 파라미터는 추출을 시작할 문자 위치이고 두 번째 파라미터는 추출할
   문자의 갯수임
-> 따라서 슬라이스는 첫 번째 위치에서부터 세 번째 위치까지 포함됨(6/15)

- 또한 특정 문자 뒤에 문자열의 나머지 문자를 모두 추출하려는 경우,
  두 번째 매개 변수를 포함하지 않고 문자열에서 나머지 문자를 추출할 
  위치의 문자 위치만 포함하면 됨(6/15)
-> 다음을 시도해봄
   browserType.slice(2);
-> 이렇게 하면 "zilla"가 반환됨
-> 문자의 2번째 위치는 "z"이고, 두 번째 매개 변수를 포함하지 않았기 때문에
   반환된 하위 문자열은 문자열의 나머지 문자 모두임(6/15)
   

### 대/소문자 변경

- 문자열 메소드 toLowerCase()와 toUpperCase()는 문자열을 가져와 
  그것을 모두 각각 대문자나 소문자로 바꿈
-> 이는 데이터베이스에 저장하기 전에 모든 사용자 입력 데이터를 표준화하려는 경우
   유용함
   

### 문자열의 일부를 변경하기

- 문자열 내의 한 하위 문자열을 replace()를 통해 다른 하위 문자열로 바꿀 수 있음
-> 이 작업은 기본적인 수준에서 매우 간단하게 작동함
-> 하지만 아직 시도해보지 않은 고급 작업도 있음
-> 그것은 2개의 매개변수를 가짐
-> 바뀜을 당하는 문자와 바꾸려는 문자임
   browserType.replace('moz', 'van');
   
   
   
   
 


   
   


   
   



