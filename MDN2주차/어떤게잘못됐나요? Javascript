
- 에러의 종류

1) 구문 에러(Syntax Error)
- 코드 상의 구문 에러로 대개 철자가 잘못되어 작동이 안되거나 프로그램이 중지됨
-> 물론 여기서 에러 메시지가 출력되므로 확인할 수 있음
-> 코드 편집기 툴을 사용하고 에러 메시지의 의미만 파악할 수 있다면, 충분히 고칠 수 있음

2) 논리 에러(Logical Error)
- 구문은 올바르지만 코드의 의미 자체가 잘못된 경우임
-> 즉, 프로그램은 정확히 돌아가지만 원하는 결과를 얻지 못하는 경우임
-> 에러 메시지가 직접적으로 표시되지 않기 때문에, 
   일반적으로 구문 에러보다 에러 수정이 힘듬
   
   
- 잘못된 예

- 시작하기 앞서, 이전에 본 '숫자 맞추기 게임'을 살펴봄
-> 이번 시간을 제외하고는 앞으로 일부러 에러를 만든 코드를 볼 것임
-> 깃허브에 가서 로컬 지역에 저장함

1. 시작하기 앞서 파일을 본인이 사용하는 텍스트 에디터와 브라우저를 통해 열음
2. 프로그램을 실행시켜봄("Submit Button"을 눌렀을 때, 정상적으로 실행이 되면 안됨) 
-> 여기서 구문 에러가 발생했을 때, 볼 수 있는 개발자 콘솔에 대해 살펴보고 
   이를 통해 수정해봄


## 구문 에러 고치기

- 수업 앞쪽에서 간단한 자바스크립트 명령어를 developer tools Javascript console에서 살펴봄
-> 좋은 것은 브라우저의 자바스크립트 엔진이 구문 에러가 발생할 때마다
   에러메시지를 콘솔에 던져줌
   
1. 열려져 있는 number-game-errors.html이 있는 탭으로 가서 자바스크립트 콘솔 창을 열음
-> 다음 줄을 따라 에러메시지를 볼 수 있음

2. 이는 쉬운 에러이기 때문에 브라우저가 해결하도록 팁 등을 알려줌
   왼쪽부터 살펴보면
 - 빨간색 x는 에러라는 것을 의미함
 - 무엇이 잘못되었는지 알려줌
 -> 여기서는 TypeError: guessSubmit.addeventListener is not a function
 - 에러가 발생한 줄번호와 그 줄에서 몇 번째 문자에 있는지 알려줌
 -> 여기서는 86번째 줄 앞에서 3번째 문자임
 
 3. 편집기에서 86번째 줄을 봄
   guessSubmit.addeventListener('click', checkGuess);
   
 4. "guessSubmit.addeventListener is not a function" 이라고 에러 메시지가 뜬 걸로 보아
    아마 철자가 잘못되었을 것임
    -> 만약 철자가 애매하거나 하면 MDN에서 찾아보는 것이 좋음

 5. 여기서 살펴보면, 함수의 이름 철자가 틀려서 에러가 났음을 알 수 있음
 -> 자바스크립트와 같은 프로그래밍은 정확하기 때문에 한 글자라도 틀리면 에러가 남
 -> addeventListener를 addEventListener로 바꿈으로 에러는 해결됨
 
 
   
 ### 반복되는 구문에러
 
 1. 저장하고 새로고침해봄
 -> 하지만 그래도 여전히 에러가 남
 2. 이제 숫자를 입력하고 "Submit Guess"버튼을 눌러봄
 -> 그런데 또 다른 에러가 나타남
 3. 이번에는 에러 메시지가 78번줄에 "TypeError: lowOrHi is null"이라고 뜸
 
 4. 78번줄은 다음 코드임
    lowOrHi.textContent = 'Last Guess was too high'!
    
 5. 이 줄에서는 lowOrHi 변수의 textContent속성을 문자열로 지정하지만,
    lowOrHi가 어떤 역할을 하는지 포함하지 않았기 때문에 동작되지 않음
 -> 왜 그런지 살펴보면 예제의 lowOrHi의 다른 예제를 보면 알 수 있음
 
    var lowOrHi = document.querySelector('lowOrHi')
    
 6. 여기서는 변수로 하여금 HTML안의 요소로 정보를 가지도록 하려고 함
 -> 이 줄이 실행되고 나서 값이 NULL인지도 확인해 봄
 -> 49번째 줄에 다음 코드를 추가해 봄
    console.log(lowOrHi);
    
 7. 저장하고 새로고침해보면, 콘솔창에서 console.log()의 결과를 볼 수 있음
 -> 물론, lowOrHi's 값은 여전히 null이므로 48번줄은 문제가 있다고 볼 수 있음
 
 8. 문제가 무엇인지 생각해봄
 -> document.querySelector()메소드는 CSS 선택자로 하여금 선택되는 요소의 정보를 갖게 만듬
 -> 파일을 살펴보면 다음과 같은 코드를 볼 수 있음
    <p class="lowOrHi"></p>
 
 9. 따라서 여기에 점(.)으로 선택하는 선택자가 필요함
 -> 하지만 48번줄의 querySelector()메소드에는 이 점(.)이 없음
 -> lowOrHi를 .lowOrHi로 바꿔서 문제를 해결할 수 있음
 
 10. 저장하고 새로고침하면 console.log()에서 우리가 원하는 <p>요소를 반환함
 -> 자, 이제 다른 에러가 해결되었음
 -> console.log()를 지금 해결해도 되고 나중을 위해서 놔둬도 됨
 
 
 ### 세번씩 반복되는 구문에러
 
 1. 이제 프로그램을 계속 실행할수록, 성공횟수는 많아짐
 -> 즉, 프로그램이 종료할때까지 정확한 수를 추측하든 횟수에 상관없이 완벽하게 동작함
 
 2. 여기서 프로그램에 처음에 보았던 에러가 똑같이 발생함
  "TypeError: resetButton.addeventListener is not a function" 이라고!
 -> 하지만 이번에는 94번째 줄에 표시됨
 
 3. 94번째 줄을 보면 똑같은 실수를 하고 있음을 볼 수 있음
 -> 단지 addeventListener를 addEventListener로 철자만 주의해서 바꾸면 됨
 
 
 ### 논리 에러
 
 - 이제 프로그램은 잘 작동되지만 몇 번 프로그램을 돌리면 
   추측해야 할 수가 항상 1이라는 것을 명백히 알 수 있음
 -> 즉, 프로그램의 목표에 어긋남
 
 - 이는 분명 프로그램 어딘가에 논리적 오류가 있는 것임
 -> 물론, 에러가 검출되지도 않았고 잘 작동함
 
 1. randomNumber 변수를 찾고, 임의의 수를 처음으로 지정된 곳도 찾음
 -> 임의의 수가 저장된 부분은 아마 44번 줄 언저리일 것임
 
   var randomNumber = Math.floor(Math.random())+1;
   
    또한 한 게임이 끝나면 다시 임의의 수를 지정하는 부분은
    아마 113번줄 정도일 것임
    
   randomNumber = Math.floor(Math.random()) + 1;
   
 2. 이 줄에서 문제가 발생되었는지 알기 위해, console.log()를 불러옴
 -> 다음 코드를 앞선 두 코드 아래에 넣는 것을 잊지 말음
    console.log(randomNumber);
    
 3. 저장하고 새로고침하게 되면 randomNumber 변수가 항상 1로 표시됨을 알 수 있음
 
 
 ### 논리에 대한 고찰
 
 1. 고치기 전에 이 코드가 무슨 역할을 하는지 살펴봄
 -> 먼저 0과 1사이의 임의의 10진수를 생성하는 Math.random()을 살펴봄
    Math.random()
    
 2. 다음으로 가장 가까운 정수로 전달되는 Math.floor()안의 Math.random()의 결과는 넘어감
 -> 그리고 결과값에 1을 더함
    Math.floor(Math.random()) + 1;
 -> 0과 1사이에 임의의 10진수와 가장 가까운 수 중에 작은 수는 항상 0이므로
    여기서 1을 더하면 항상 1이 됨
 -> 따라서 가까운 수를 찾기 전에 임의수에 100을 곱해야 함
 -> 다음 코드는 곧 0과 99사이의 수를 나타냄
    Math.floor(Math.random()*100)
 
 3. 그러므로 여기서 1을 더하게 되면, 우리가 원하는 1과 100사이의 수가 됨
    Math.floor(Math.random()*100)+1
    
 
### 다른 일반적인 에러

- 코드상에서 맞닥뜨릴 수 있는 에러는 여러가지가 있음
-> 이번 섹션은 이러한 에러들에 대해 말해줌


1. Syntax Error: missing; before statement



   
 
   
