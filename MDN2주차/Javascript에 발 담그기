https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/A_first_splash

- 지금 현재로서는 코드를 자세히 이해하려고 하지 않음
-> 단지 지금은 개념을 넓게 이해하고, 
   자바스크립트가 어떻게 운용되는지에 대한 아이디어가 필요함
+ 왜 지금은 개념을 넓게 이해하고, 자바스크립트가 어떻게 운용되는지에 대한 아이디어를 얻고자 하는가?
-> 큰 그림을 그리고자 하는 것이다. (6/7) 
+ 왜 큰 그림을 그리고자 하는가?
-> 큰 그림을 그려놓고 지식들을 연결해서 생각하기 위함이다. (6/7) 
   
- 프로그래밍에서 가장 어려운 것은 우리가 배우려는 문법이 아닌,
  실생활의 문제를 어떻게 프로그래밍에 적용시킬까 하는 부분임
-> 이는 일반적으로 프로그램이 필요한 부분과
   어떻게 코드가 문제를 해결하기 위해 작동되고,
   협업해야 되는지에 대한 설명을 알고 있어야 된다는 것임
+ 왜 프로그래밍에서 가장 어려운 것은 우리가 배우려는 문법이 아닌,
  실생활의 문제를 어떻게 프로그래밍에 적용시킬까 하는 부분인가?
-> 실생활의 문제를 어떻게 프로그래밍에 적용시킬까 하는 부분에서 
   프로그래밍적 사고를 가장 많이 그리고 깊게 해야 하기 때문이다. (6/7) 
 
 - 이는 프로그래밍 문법에 대한 경험과 노력, 그리고 창의성을 비롯한
   노력의 조합이 필요하다
 -> 코드를 많이 작성할수록 얻는 것은 더 많아진다
 -> 지금 당장 "프로그래머의 사고능력"으로 발전시킨다고는 보장하지 못하지만,
    이 수업을 통해 여러분들에게 프로그래머처럼 생각하는 많은 연습의 기회는 줄 수 있음
    
 + 프로그래머의 사고능력이란 무엇인가?
 -> 프로그램을 작성할 수 있는 능력, 프로그램을 작성하는 과정에서 발생하는 문제를 해결할 수 있는 능력,
    프로그램을 작성하는 과정에서 발생하는 문제를 해결하기 위해, 문제의 원인을 발견할 수 있는 능력,
    문제의 원인을 발견하기 위해 문제의 원인을 추론할 수 있는 능력,
    문제를 해결가능한 코드로 작성하는 능력, 문제를 해결가능한 코드로 작성하기 위한 문법적 지식에 대한 이해 능력
    등을 포함한다.(6/7) 
 
 + 왜 프로그래밍 문법에 대한 경험과 노력, 그리고 창의성을 비롯한 노력의 조합이 필요한가?
 -> 프로그래밍 문법에 대한 경험과 노력이 실생활의 문제를 프로그래밍으로 해결하는데 기반이 되기 때문이다. (6/7)
 -> 왜 프로그래밍 문법에 대한 경험이 중요한가?
 -> 프로그래밍 문법에 대한 경험을 통해서 실제 활용 능력을 향상시킬 수 있기 때문이다.(6/7) 
 + 왜 프로그래밍 문법에 대한 노력이 중요한가?
 -> 프로그래밍 문법에 대한 노력을 통해서 프로그래밍에 대한 문법을 익힐 수 있기 때문이다.(6/7) 
 + 왜 프로그래밍에 대한 창의성이 중요한가?
 -> 창의성은 문제에 대한 관점을 다르게 가져가는 것을 의미한다.(6/7)
 + 왜 문제에 대한 관점을 다르게 가져가는 것이 중요한가?
 -> 문제에 대한 관점을 다르게 가져가는 것이 문제를 해결하는 것으로 이어질 수 있기 때문이다. (6/7) 
 + 왜 문제에 대한 관점을 다르게 가져가는 것이 문제를 해결하는 것으로 이어질 수 있는가?
 -> 어떤 문제가 발생했을 때, 문제의 원인이 자신이 생각하지 못한 지점에 있을 수 있다. 
 -> 이 경우, 문제에 대한 관점을 다르게 가져가야만 그 문제를 '볼' 수 있게 된다.(6/7)
 -> 문제를 '볼'수 있게 된다는 것은 문제가 무엇인지 '알' 수 있게 된다는 것을 의미하고,
    문제가 무엇인지 '알'수 있게 된다는 것은 문제를 정의할 수 있게 된다는 것을 의미한다.
    그리고 문제를 정의할 수 있게 된다는 것은 문제를 해결할 수 있게 된다는 것을 의미한다. (6/7) 

+ 왜 코드를 많이 작성할수록 얻는 것은 더 많아지는가?
-> 코드를 많이 작성할수록 사고를 더 많이하게 되고, 이 과정에서 논리적인 사고 역량이 향상되기 때문이다.
-> 코드를 많이 작성할수록 사고를 더 많이 하게 되고, 관련된 지식을 습득할 수 있게 되기 때문이다.(6/7)  
-> 코드를 많이 작성할수록 문제에 대해서 더 깊게 고민하게 되고, 이 과정에서 문제를 정의하는 역량이 향상되기 때문이다.(6/7) 

 - 이러한 개념을 마음속에 품고, 앞으로 우리가 만들어나갈 예제를 살펴봄
 -> 여기서 실생활의 문제를 프로그래밍할 수 있도록 쪼개는 일반적인 과정을 봄

+ 실생활의 문제를 프로그래밍할 수 있도록 쪼갠다는 것이 무엇인가?
-> 실생활의 문제를 프로그래밍할 수 있도록 쪼갠다는 것은,
   문제를 사고하고 해결할 수 있는 단위로 만든다는 것을 의미한다. (6/7) 
+ 문제를 사고하고 해결할 수 있는 단위로 만든다는 것이 무엇인가?
-> 문제를 사고하고 해결할 수 있는 단위로 만든다는 것은
   문제의 난이도르 낮춘다는 것을 의미한다.
   뇌는 한 번에 사고할 수 있는 능력이 있다. 그 뇌가 사고할 수 있는 능력으로 문제를 해결할 수 있다.(6/7) 
+ 뇌가 한 번에 사고할 수 있는 능력이 있다는 것이 무엇인가?
-> 뇌가 한 번에 사고할 수 있는 능력의 단위가 정해져 있는 것을 의미한다.(6/7) 
+ 왜 뇌가 한 번에 사고할 수 있는 능력의 단위가 정해져 있는가?
-> 뇌가 한 번에 사고할 수 있는 능력의 단위가 정해져 있는 이유는 뇌의 기능과 관련된 것이다.(6/7) 
 
 - 만약 너의 상사가 예제에 관련되어 다음의 짧은 안내만 주어졌다고 생각하자
 
 -> 나는 간단하게 숫자 맞추기 게임을 만들고 싶다. 
    1과 100사이의 수 중에서 무작위로 선택되어야 하고,
    플레이어는 10번의 기회 안에 그 숫자를 맞춰야 한다.
    각 순서마다 숫자를 맞췄는지 틀렸는지는 당연히 알려줘야 하고,
    틀렸다면 큰지 작은지도 포함해서 말해야 한다.
    또한 이전에 써냈던 번호들도 보여줘야 한다.
    게임은 플레이어가 숫자를 맞추던가, 기회를 모두 소진하면 끝나게 된다.
    게임이 끝나면 플레이어가 다시 게임을 할 것인지 묻게 된다. 
 
 - 위의 안내문을 보고 우선 문제를 가능한 한 작게 쪼개서,
   간단한 작업으로 만드는 것부터 시작함
 
 1. 1과 100 사이의 숫자 중 무작위로 추출함
 2. 1부터 플레이어의 차례를 기록함
 3. 플레이어에게 숫자를 맞출 수 있도록 함
 4. 숫자를 맞추면 어딘가에 저장하고, 사용자는 이전의 추측한 숫자를 볼 수 있도록 함
 5. 그 다음 숫자가 일치한지 확인함
 6. 만약 일치한다면:
   1. 축하 메시지를 표시함
   2. 더 이상 숫자를 맞출 필요가 없음
   3. 플레이어가 다시 게임을 할지 물음
 7. 숫자가 틀렸고, 차례가 남아 있다면:
   1. 틀렸다고 알림
   2. 다른 숫자를 입력할 수 있도록 함
   3. 차례가 1 증가함
 8. 숫자가 틀렸고, 차례가 없다면,
   1. 게임이 종료되었음을 알림
   2. 더 이상 숫자를 맞출 필요가 없음
   3. 플레이어가 다시 게임을 할지 물음
 9. 게임이 재시작되면, 게임의 구조와 UI는 완전히 리셋되며,
    step1부터 다시 로직이 시작됨
    
 + 왜 문제를 간단한 작업으로 만드는가?
 -> 문제를 간단한 작업으로 만듦으로 인해서 해결하기 쉬운 상태로 변환할 수 있기 때문이다.(6/7) 
 + 문제를 간단한 작업으로 만듦으로 인해서 해결하기 쉬운 상태로 변환한다는 것이 무엇인가?
 -> 논리적인 사고가 가능한 단위로 변환하는 것을 의미한다. 
 -> 보통 하나의 문제에는 여러 논리가 조합되어 있는데, 이 경우는 그 논리들을 분리해서 각각을 독립적인 논리로 분할하여야 한다.(6/7) 
 
 - 이제 다음 단계로 넘어가서 각 단계들을 코드로 어떻게 만들고,
   예제 소스와 통합하며, 그와 관련된 자바스크립트 기능은 무엇인지 살펴봄
   
 
 - 초기 구성
 1) 수업에 앞서 로컬에 number-guessing-game-start.html 파일을 저장하길 바람
 -> 그리고 파일을 에디터와 브라우저에서 동시에 열어봄
 -> 간단하게 요약된 설명과 추측하는 폼을 볼 때,
    아직 숫자를 입력하는 폼은 아무런 기능을 하지 않음
 
 - 여러분들의 코드를 추가하는 부분은 HTML안의 <script> 요소 사이에 있음
 
 <script>
 
 // Your Javascript code here
 
 </script> 
 
 
 2) 데이터 저장을 위한 변수 추가
 -> 이제 시작해보자!
 -> 먼저 <script> 태그 안에 다음 코드들을 추가함
 
 var randomNumber = Math.floor(Math.random()*100) + 1;
 
 var guesses = document.querySelector('.guesses);
 var lastResult = document.querySelector('.lastResult);
 var lowOrHi = document.querySelector('.lowOrHi');
 
 var guessSubmit = document.querySelector('.guessSubmit);
 var guessField = document.querySelector('.guessField);
 
 var guessCount = 1;
 var resetButton;
 
 
 - 이 코드의 부분은 프로그램에서 사용할 데이터를 저장할 변수를 세팅해줌
 -> 변수들은 기본적으로 값을 저장하고 있음
 -> 변수들은 var이라는 키워드를 변수의 이름 앞에 붙여줌으로써 선언이 됨
 -> 변수에 넣고자 하는 값 앞에 등호(=)를 통해 변수에 값을 지정해줄 수 있음
 
 - 예제에서
 1) 첫 번째 변수 randomNumber는 수학적 알고리즘을 통해 계산해,
    1과 100사이의 임의의 수를 지정함
 2) 다음의 세 개의 변수들은 각각 HTML에서 결과 문장을 저장하는 기준으로 저장되고,
    코드 상에서 나중에 문장에 추가되도록 사용됨
    
 <p class="guesses"> </p>
 <p class="lastResult"> </p>
 <p class="lowOrHi"> </p>
 
 3) 다음의 2개 변수는 다음의 입력과 버튼을 받고, 추측된 값을 나중에 받도록 하는 역할을 함
 
 <label for="guessField"> Enter a guess: </label><input type="text" id="guessField" class="guessField>
 <input type="submit" value="Submit guess" class="guessSubmit">
 
 4) 마지막 2개의 변수에는 추측 개수와 아직은 있지 않은 버튼을 리셋하는 변수가 있음
 
 
 
- 함수

다음으로 아래의 자바스크립트 코드를 추가함

function checkGuess(){
  alert('I am a placeholder");
}

-> 함수는 재사용이 가능한 코드의 묶음으로서 한 번만 명시하면 몇 번이고 실행이 가능하여,
   전체적인 코드에서 반복을 줄일 수 있음
-> 이는 매우 유용함
-> 함수를 정의하는 방법에는 여러 가지가 있지만, 일단 여기서는 가장 간단한 방법만 집중적으로 살펴봄
-> 앞에 function 키워드를 사용하고, 함수의 이름을 작성하며,
   함수의 이름 뒤에 괄호를 넣어줌으로써, 함수를 정의할 수 있음
-> 그러고 나서 중괄호로 묶어줌
-> 중괄호 안에는 함수가 호출되면 실행되는 반복적인 코드들이 들어 있음

- 코드는 괄호 앞에 위치한 함수의 이름을 적음으로 실행됨
-> 코드를 저장하고 브라우저에서 새로고침을 통해 실행해봄


- developer tools Javascript console에 들어가서 다음 문장을 입력해봄
-> checkGuess();

"I am a placeholder"라고 알리는 alert를 볼 수 있음
-> 여기서는 함수가 호출되면 alert가 생성되는 함수로 정의되어 있음


- 연산자

- 자바스크립트의 연산자는 테스트를 진행하고, 수학적인 것을 다루고,
  문자열을 결합하는 등의 것들을 가능케 함
  
- 먼저 산술 연산자를 살펴봄
1) + : 더하기  6+9
2) - : 빼기  20-15
3) * : 곱하기 3*7
4) / : 나누기 10/5

- 또한 + 연산자는 문자열들을 서로 연결할 때에도 사용됨(이를 '문자열 접합'이라고 함)
-> 다음 코드를 입력해봄

var name = 'Bingo';
name;
var hello = ' says hello!';
hello;
var greeting = name + hello;
greeting


  


   
 
 
 
 
 
 
