
https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/Variables

- 앞선 두 수업을 듣고 자바스크립트에 대해(웹 기술에서 어떻게 사용되는지, 큰 범위에서의 특징)
  알아봄
-> 이번 수업에서는 기본 중에 기본인 자바스크립트의 주된 구성 중 하나인 
   변수가 어떻게 이루어져 있는지 알아봄
   
   
- 변수란?

변수란, 숫자(합계나 계산에 사용되는) 또는 문자열(문장의 일부로 사용되는)과 같은 값의 컨테이너임
-> 그러나 변수에 대한 한 가지 특별한 점은 포함된 값이 변경될 수 있다는 것임

<button> Press me </button>

const button = document.querySelector('button');

button.onclick = function(){
  let name = prompt('What is your name?');
  alert('Hello' + name + ', nice to see you!');
}

- 이 예제에서 버튼을 누르면 몇 줄의 코드가 실행됨
-> 첫 번째 줄은 독자가 입력하도록 요청한 화면에 상자를 띄운 다음,
   변수에 값을 저장함
   
- 두 번째 줄은 변수 값에서 가져온, 이름이 포함된 환영 메시지가 표시됨


- 우리가 사용하고 있는 구문을 완전히 이해하지는 못했지만, 아이디어를 얻을 수 있어야 함
-> 변수를 사용할 수 없다면, 입력된 이름을 검사하는 거대한 코드 블록을 구현해야 함
-> 그런 다음 해당 이름에 대한 각각의 메시지를 출력해야 함
-> 이것은 분명히 비효율적임
-> 그리고 가능한 모든 선택 사항을 저장할 수 없어 작동하지 않을 수도 있음

- 변수는 이해하기 쉬움
-> 자바스크립트에 대해 더 많이 배우면, 변수들은 자연스럽게 느껴질 것임

- 변수에 대한 또 다른 특별한 점은 문자열과 숫자뿐 아니라 무엇이든 포함할 수 있다는 것임
-> 변수에는 복잡한 데이터와 놀랄만한 기능을 수행하는 함수(Function)까지도 포함될 수 있음
-> 당신은 이것에 대해 점점 더 많이 배울 것임

- 변수는 값을 포함하고 있음
-> 이것은 중요한 차이점임
-> 변수는 값 자체가 아님
-> 변수는 값을 위한 컨테이너임
-> 당신은 변수란 물건들을 저장할 수 있는 작은 골판지 상자와 같다고 할 수 있음


### 변수의 선언

- 변수를 사용하기 위해서, 먼저 변수를 선언해야 함
-> 보다 정확히는 변수를 선언한다고 부름
-> 이를 위해 키워드 var를 입력하고, 당신이 원하는 변수 이름을 입력함

var myName;
var myAge;

- 여기서 우리는 myName과 myAge라는 두 개의 변수를 생성함
-> 웹 브라우저의 콘솔 또는 아래 콘솔에서 두 행을 입력해 봄

- 변수 이름을 입력하여 변수의 값이 실행 환경에 존재하는지 테스트 할 수 있음
-> myName;
-> myAge;

- 이 변수들은 값을 포함하고 있지 않은 빈 컨테이너임
-> 변수 이름만 입력 할 경우 undefined 값을 반환하며 변수는 이 값(undefined)을 포함하게 됨
-> 만약 존재하지 않는(선언되지 않은) 변수는, 오류 메시지가 표시됨
-> 아래 변수를 입력하여 확인해 봄
   scoobyDoo;

- 존재하지만 값을 포함하고 있지 않은 변수와 존재하지 않는 변수를 혼동하지 않아야 함
-> 둘은 매우 다른 것들임


### 변수의 초기화

- 변수를 선언한 후에는 값으로 초기화할 수 있음
-> 변수 이름 다음에 등호(=)와 그 뒤에 부여할 값을 입력하여 이 작업을 수행할 수 있음

myName = 'Chris';
myAge = 37;

- 콘솔로 돌아가 코드들을 입력해 봄
-> 각각의 경우 변수에 할당한 값은 콘솔을 통해 반환되어 확인할 수 있음

myName;
myAge;

- 다음과 같이 변수를 선언하고 동시에 초기화 할 수 있음

var myName = 'Chris';

- 아마도 변수의 선언과 초기화를 두 줄로 나누어 하는 것보다 더 빠르기 때문에
  대부분 이러한 방식을 자주 사용하게 됨
  
  
### 변수의 재지정

- 변수에 값이 할당되면 다른 값을 지정하여 해당 값을 업데이트할 수 있음
-> 콘솔에 다음 행을 입력해 봄

myName = 'Bob';
myAge = 40;


### 변수 이름에 대한 규칙

- 변수를 원하는 대로 이름을 부여할 수 있지만 제한이 있음
-> 일반적으로 라틴 문자(0-9, a-z, A-Z)와 밑줄 문자를 사용해야 함

(1) 오류가 발생하거나 전 세계 타인이 이해하기 어려울 수 있으므로,
    다른 문자를 사용하면 안됨

(2) 변수 이름의 시작 부분에 밑줄(_)을 사용하지 않아야 함
-> Javascript 구문에서 밑줄로 시작하는 것은 특별한 의미를 가지고 있으므로,
   혼란을 가져올 수 있음
   
(3) 변수 이름의 시작 부분에 숫자를 사용하지 않아야 함
-> 허용되지 않으며 오류가 발생함

(4) 안전한 명명법은 소위 'lower camel case(소문자 낙타 문법)'임
-> 여러 단어를 하나로 묶고 첫 단어의 시작은 소문자를 사용하며,
   그 다음 단어의 시작은 대문자를 사용함
-> 우리는 지금까지 이 문서에서 변수 이름에 이 방법을 사용해 옴 

(5) 포함된 데이터를 쉽게 이해할 수 있게 변수 이름을 직관적으로 부여함
-> 단일 문자 / 숫자 또는 긴 구절을 사용하지 않음
-> 변수 이름을 직관적으로 만들어, 포함된 데이터를 표현함

(6) 변수는 대소문자를 구분함
-> myage와 myAge는 다른 변수임

(7) 마지막으로 Javascript 예약어를 변수 이름으로 사용하면 안됨
-> 예약어란 Javascript의 실제 구문을 구성하는 단어를 의미함
-> 따라서 변수 이름으로 var, function, let, for와 같은 단어를 사용할 수 없음
-> 브라우저는 이런 단어를 다른 코드 아이템(예약어)으로 인식하므로 오류가 발생함

- 바람직한 변수 이름의 예

age
myAge
init
initialColor
finalOutputValue
audio1
audio2

- 바람직하지 않은 변수 이름의 예

1
a
_12
myage
MYAGE
var
document
skjfndskjfnbdskjfb
thisisareallylongstupidvariablenameman

-> 위의 지침을 염두에 두고 몇 가지 변수를 추가로 작성해 봄


### 변수의 종류

- 변수에 저장할 수 있는 몇 가지 유형의 데이터가 있음
-> 이 섹션에서는 이를 간단히 설명하고, 이후 자세히 살펴봄
-> 지금까지 우리는 두 가지 형태의 데이터 유형을 살펴봤지만, 
   다른 유형들도 있음
   
(1) 숫자
- 30과 같은 숫자(정수라고도 함)나 2.456(부동소수점 또는 부동소수점 숫자라고도 함)같은 십진수 숫자를 
  변수에 저장할 수 있음
-> Javascript는 일부 프로그래밍 언어처럼 숫자 유형에 따른 다른 데이터 유형을 갖고 있지 않음
-> 변수에 숫자값 대입할 때, 따옴표를 사용하지 않음

var myAge = 17;

(2) 문자열
- 문자열은 텍스트의 조각임
-> 변수에 문자열 값을 대입할 때, 작은따옴표(')나 큰따옴표(")로 묶어야 함
-> 그렇지 않으면 Javascript에서는 다른 변수 이름으로 해석함

var dolphinGoodbye = 'So long and thanks for all the fish';

(3) 불리언
- 불리언(Booleans)은 true이나 false라는 값을 가지는 참/거짓을 표현하는 데이터 유형임
-> 일반적으로 조건을 테스트하는데 사용되며 그 다음 코드가 조건에 따라 실행됨
-> 예를 들어 다음과 같음
  var iAmAlive = true;

- 일반적으로 다음과 같은 방식으로 더 많이 사용됨

  var test = 6 < 3;
  
- 위의 코드는 "작다" 연산자를 사용하여 6이 3보다 작은지를 확인함
-> 예상한대로 6이 3보다 작지 않으므로 false를 반환함
-> 나중에 이러한 연산자에 대해 더 많이 배우게 됨

(4) 배열
- 배열은 대괄호로 묶이고 쉼표로 구분 된 여러 값을 포함하는 단일 객체임
-> 다음 코드를 콘솔에 입력해 봄

var myNameArray = ['Chris', 'Bob', 'Jim'];
var myNumberArray = [15, 40, 30];

- 이러한 배열이 정의되면 다음과 같은 구문을 사용하여 개별 값에 접근할 수 있음
-> 다음 코드를 입력해 봄

myNameArray[0];
myNumberArray[2];

- 대괄호에는 반환할 값의 위치를 지정하는 인덱스 값이 들어 있음
-> 컴퓨터는 우리 사람처럼 1대신 0부터 숫자를 센다는 것을 알 수 있음
-> 앞으로 배열에 대해 더 많이 배우게 됨


(5) 객체
- 프로그래밍에서 객체(Objects)는 실제 사물(real life object)을 모델링 하는 코드 구조임
-> 예를 들어, 주차장 객체는 주차장의 높이와 넓이 정보를 가지고 표현할 수 있으며,
   사람 객체는 이름, 키, 몸무게, 사용하는 언어 등의 정보를 가지고 표현할 수 있음
   
- 콘솔에 다음 코드를 입력해 봄
 
var dog = {name: 'Spot', breed: 'Dalmatian'};

- 객체에 저장된 정보를 검색하기 위해서는 아래 구문을 사용함

dog.name

- 지금은 객체에 대해 더 자세히 보지 않을 것임
-> 앞으로 모듈에 있는 객체에 대해 더 많이 배울 수 있음


### 지정되지 않은 타입

- Javascript는 느슨한 유형의 언어(loosely typed language)임
-> 즉, 다른 언어와 달리 변수에 포함할 데이터의 유형을 지정할 필요가 없음

- 예를 들어, 변수를 선언하고, 그 변수의 값을 따옴표로 묶은 값을 지정하면,
  브라우저는 변수의 값을 문자열로 인식함
  
  var myString = 'Hello';
  
- 따옴표 안에 숫자가 포함되어 있어도 여전히 문자열로 인식되므로 주의해야 함

var myNumber = '500';
typeof(myNumber);
myNumber = 500;
typeof(myNumber);

- 위의 네 줄의 코드를 하나씩 콘솔에 입력하여 결과가 무엇인지 확인해 봄
-> 여기에서 typeof()라는 특수 함수를 사용하고 있음을 알 수 있음
-> 이 함수는 입력한 변수의 데이터 유형을 반환함
-> 위의 코드에서 처음으로 호출될 때, myNumber 변수에는 '500'이라는 문자열을 포함하고 있으므로,
   string을 반환해야 함
-> 두번째는 어떤 값을 반환하는지 확인해 봄


### 요약

- 지금까지 Javascript의 변수란 무엇이며, 어떻게 생성하는지 알아봄
-> 다음에는 Javascript에서 숫자에 관해 자세히 살펴보고,
   기본 계산하는 방법을 알아봄
   
   



  




   



  
