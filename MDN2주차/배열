
https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/Arrays

- 배열은 다수의 변수들을 가지고 있는 하나의 객체임("list-like objects")
-> 배열 객체는 변수에 저장 해서 사용할 수 있고, 
   변수에 저장된 다른 값들과 거의 동일한 방식으로 쓸 수 있음(6/15)
   
- 일반적인 값들과 배열의 다른점은 내부의 값에 각각 접근할 수 있으며,
  루프를 통해 매우 효율적으로 작업이 가능하다는 점임
-> 예를 들어 우리가 흔히 보는 영수증의 제품 목록, 가격 등이 배열이라고 
   볼 수 있으며 그 가격들의 총합을 루프를 통하여 구할 수 있음(6/15)
   
- 만약 배열이 없다면 다수의 값이 있을 때 각 값을 하나의 변수에 일일이 저장해야 하는
  문제가 생김
-> 해당 값들을 출력하거나 연산할 때 한땀한땀 개고생해야 함
-> 이 때문에 코드를 작성하는데 오래걸리며, 비효율적이고 실수를 할 가능성이 높아짐
-> 오늘 산 물건이 10개 정도라면 값을 더하는데 얼마 걸리지 않겠지만,
   100개나 1000개쯤 구입을 했다면?
   
- 이전에 배웠던 것처럼, Javascript 콘솔에서 몇 가지 예제를 통해
  배열의 기초부터 알아봄
-> 아래에 우리가 제공하는 콘솔이 하나 있음


### 배열 만들기

- 배열은 대괄호로 구성되며 쉼표로 구분 된 항목들을 포함함

1. 쇼핑 목록을 배열에 저장하고 싶다면 다음과 같이 하면 됨 
-> 콘솔에 다음 행을 입력함

var shopping = ['bread', 'milk', 'chesse', 'hummus', 'noodles'];
shopping;

2. 아래 배열의 각 항목은 문자열이지만 배열의 모든 항목(문자열, 숫자, 개체,
   다른 변수, 심지어 다른 배열)을 저장할 수 있음
-> 동일한 형태의 항목만 넣거나, 다양한 형태의 항목을 함께 넣을 수 있음
-> 모두 숫자, 문자열 등일 필요는 없음
-> 다음을 입력해봄

var sequence = [1,1,2,3,5,8,13];
var random = ['tree', 795, [0,1,2]];


3. 배열 항목의 접근과 수정
-> 그런 다음 문자열의 문자에 접근했던 것과 같은 방법으로 괄호 표기법을 사용하여 배열의
   개별 항목에 접근할 수 있음
   
(1) 콘솔에 다음을 입력함
    shopping[0];
  
(2) 단일 배열 항목에 새 값을 제공하여, 배열의 항목을 수정할 수도 있음
    shopping[0] = 'tahini';
    
(3) 배열 내부의 배열을 다중배열이라고 함
-> 대괄호 두 개를 함께 연결하여 다른 배열 안에 있는 배열 내부의 항목에 접근할 수 있게 함
-> 예를 들어 무작위 배열(random array)안의 세 번째 항목인 배열 내부 항목 중 하나에 접근하려면
   다음과 같이 할 수 있음
    random[2][2];
(4) 다음 단계로 넘어가기 전에 충분히 배열 예제를 연습해봄 


### 배열의 갯수 알아내기

- length 속성을 사용해서 배열에 들어 있는 문자열의 갯수를 알아낼 수 있음
-> sequence.length;

- 다른 용도로 사용되기도 하는데, loop문으로 배열의 모든 항목을 반복적으로 
  값을 대입하는데 일반적으로 사용함

var sequence = [1,1,2,3,5,8,13]
for(var i = 0; i < sequence.length; i++){
    console.log(sequence[i]);
}

- 다음 article에서 반복문에 대해서 자세히 다루겠지만 다음과 같이 요약할 수 있음
(1) 배열을 반복문으로 돌릴 때 item의 시작번호는 0임
(2) 배열의 갯수와 같은 번호일 때 반복문을 중단함
-> 어떤 길이의 배열에서도 반복문이 돌지만, 이 경우에선 반복문이 7번 돌고 멈춤
-> 반복문을 끝내기를 원하는 마지막 item의 숫자는 6임
(3) 각각의 item에 대해 console.log()을 사용해 브라우저 콘솔창으로 확인해봄 (6/15)


### 유용한 배열 method

- 이번 섹션에서는 문자열을 배열 항목으로 분할하고, 다시 배열 항목을 문자열로 변환하며
  새로운 항목을 배열에 추가할 수 있는 배열 관련 method를 알아봄
-> 프로그램을 만들다보면 종종 긴 문자열로 이루어진 원시 데이터를 제공받게 됨
-> 원시 데이터를 정제하여 더 유용한 데이터를 추출해 테이블 형태로 표시하는 등 
   작업을 수행해야 함(6/15)
-> 이러한 작업을 위해 split() 메소드를 사용할 수 있음
-> split() 메소드는 사용자가 원하는 매개변수로 문자열을 분리하여 배열로 표현함(6/15)

1. split() 메소드가 어떻게 작동하는지 살펴봄
-> 우선 콘솔에서 아래와 같은 문자열을 만듦
   var myData = 'Manchester, London, Liverpool, Birmingham, Leeds, Carlisle';
  
2. 콤마로 분리하기 위해 단일 매개변수를 집어넣음
   var myArray = myData.split(',');
   myArray;
   
3. 마지막으로 새로운 배열의 길이를 찾고, 이 배열에서 몇 가지 항목을 검색해봄
   myArray.length;
   myArray[0];
   myArray[1];
   myArray[myArray.length-1];
   
 4. 또한 아래 방법처럼 join() 메소드를 사용하여 배열을 다시 문자열로 만들 수 있음
   var myNewString = myArray.join(',');
   myNewString;
   
 5. 배열을 문자열로 변환하는 또 다른 방법은 toString()메소드를 사용하는 것임
 -> toString()은 join()과 달리 매개변수가 필요 없어서 더 간단하지만, 제한이 더 많음
 -> join()을 사용하면 다른 구분자를 지정할 수 있음(6/15)
 
   var dogNames = ['Rocket', 'Flash', 'Bella', 'Slugger'];
   dongNames.toString();
   
   
 ### 배열에 item을 추가하고 제거하기
 
 - 이번에 배열에 item을 추가하고 제거하는 방법을 알아봄
 -> 위에서 만든 Array를 다시 사용함
 -> 섹션을 순서대로 진행하지 않았다면 아래와 같은 배열을 만들어줌
    var myArray = ['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle];
 -> 먼저, 배열의 맨 끝에 item을 추가하거나 제거하기 위해 각각 push() and pop()을 사용할 수 있음  
 
 (1) 먼저 push()를 사용함
 -> 배열의 끝에 추가할 item을 반드시 하나 이상 포함해야 한다는 점을 기억하고
    아래와 같이 따라해봄

    myArray.push('Cardiff');
    myArray;
    myArray.push('Bradford', 'Brighton');
    myArray;

 (2) method 호출이 완료되면 배열의 item이 변한 것을 확인할 수 있음
     새로운 변수에 배열을 저장하려면 아래와 같이 사용함 
     
     var newLength = myArray.push('Bristol');
     myArray;
     newLength;
     
 (3) 배열의 마지막 item을 제거하는 방법은 pop()으로 매우 간단함
 -> 아래와 같이 따라해봄 
     myArray.pop();
     
 (4) method 호출이 완료되면 배열에서 item이 제거된 것을 확인할 수 있음
     var removedItem = myArray.pop();
     myArray;
     removedItem;
     
 (5) unshift()와 shift()는 push()와 pop()과 유사하게 동작함
 -> 다만, 배열의 맨 끝이 아닌 제일 처음 부분의 item을 추가하거나 제거함
    1. 먼저 unshift()를 사용해봄
      myArray.unshift('Edinburgh');
      myArray;
    2. 이제 shift()를 사용해봄
      var removedItem = myArray.shift();
      myArray;
      removedItem;
  
### 결론

- 위에 글 읽어보니 배열이 꽤 유용해보인다는 것을 알 수 있음
-> Javascript에서 배열은 겁나 많이 쓰임
-> 배열의 모든 항목마다 똑같은 작업을 수행하려고 루프를 돌림
-> 같이 알아놓으면 좋음
-> 이 모듈은 이제 다 봤음
  

