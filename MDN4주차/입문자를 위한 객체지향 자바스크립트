
- 자, 이제 기초 단계를 벗어나서, 객체지향 Javascript(OOJS)을 보도록 함
-> 이 문서에서 객체지향(OOP)이론에 대한 기초를 훑어본 후,
   자바스크립트가 생성자와 함수를 통해 객체 클래스 개념을 따라했는지,
   그리고 어떻게 객체를 만드는지 알아봄(7/8)
   
+ 객체지향 Javascript(OOJS)를 보도록 함
+ 객체지향(OOP)이론에 대한 기초를 훑어본 후,
+ 자바스크립트가 생성자와 함수를 통해 객체 클래스 개념을 따라했는지,
  그리고 어떻게 객체를 만드는지 알아봄(7/9)
+ 어떻게 객체를 만드는지 알아본다는 것이 무엇인가?
-> 객체의 생성에 대해 알아보겠다는 의미임(7/9)
 
 ### 객체지향 프로그래밍 - 기초
 
 - 객체지향 프로그래밍(OOP)의 개요를 설명하는 것으로 시작함
 -> 지금 단계에서 OOP의 모든 것을 설명하면 너무 복잡해서 혼란만을 가중시킬 것이기 때문에
    최대한 간단히 설명함
 -> OOP의 기본 컨셉은 프로그램 내에서 표현하고자 하는 실세계(real world)의 일들을
    객체를 사용해서 모델링하고, 객체를 사용하지 않으면 불가능 혹은 무지 어려웠을 일들을
    쉽게 처리하는 방법을 제공한다는 것임(7/8)
 
 + OOP의 기본 컨셉은 프로그램 내에서 표현하고자 하는 실세계(real world)의 일들을
   객체를 사용해서 모델링하고, 객체를 사용하지 않으면 불가능 혹은 무지 어려웠을 일들을
   쉽게 처리하는 방법을 제공한다는 것임(7/9)
 
    
 - 객체는 당신이 모델링하고자 하는 일이나 기능 혹은 필요한 행동들을 표현하는 프로그램
   코드와 그와 연관된 데이터로 구성됨
 -> 객체는 데이터(그리고, 함수 역시)를 감싸서, (공식적인 표현으로는 encapsulate)
    객체 패키지(해당 객체를 참조하기 위한 이름. namespace라고도 불림)
    안에 보관함
 -> 이는 계층 구조를 만드는데 용이하고 사용하기에도 쉽게 하기 위해서임
 -> 또한, 객체는 네트워크를 통해 쉽게 전송될 수 있도록 데이터를 저장하는 용도로도 많이 사용됨(7/8)
 
 + 객체는 당신이 모델링하고자 하는 일이나 기능 혹은 필요한 행동들을 표현하는 프로그램 코드와
   그와 연관된 데이터로 구성됨
 + 객체는 데이터(그리고, 함수 역시)를 감싸서(공식적인 표현으로는 encapsulate), 객체 패키지 안에 보관함  
 + encapsulate한다는 것이 무엇인가?
 -> 데이터와 함수를 객체에 담는다는 의미임(7/9)
 
 + 이는 계층 구조를 만드는데 용이하고 사용하기에도 쉽게 하기 위해서임
 + 왜 계층 구조를 만드는가?
 -> 의미적으로 계층 구조를 만드는 것임(7/9)
 + 왜 사용하기에도 쉽게 하고자 하는가?
 -> 프로그래머가 다루기 쉽게 하고자 하는 것임(7/9)
    
 ### 객체 템플릿 정의
 
 - 자, 학교의 선생님과 학생들의 정보를 보여주는 간단한 프로그램이 있다고 침
 -> 여기서는 OOP의 일반적인 개념만을 살펴볼 뿐이지, 특정 언어에 국한된 내용을 이야기하지는 않음
 
 + 자, 학교의 선생님과 학생들의 정보를 보여주는 간단한 프로그램이 있다고 함
 + 왜 학교의 선생님과 학생들의 정보를 보여주는 간단한 프로그램을 만드는가?
 -> 실 세계(real world)의 개념을 표현하고 관리하기 위한 것임(7/9)
 + 왜 실 세계(real world)의 개념을 표현하고 관리하는가?
 -> 실 세계(real world)의 정보를 유용하게 관리하고자 하는 것임(7/9)
    클라이언트의 접속을 통해서 발생하는 실 세계(real world)의 정보를 
    서버 측으로 전달 받고, 서버 측에서는 그 정보를 유용하게 관리하고자 함(7/9)
 + 왜 유용하게 관리하고자 하는가?
 -> 유용하게 관리함으로 인해서 지속 가능한 서비스를 제공할 수 있기 때문임(7/9)
 + 왜 지속 가능한 서비스를 제공하고자 하는가?
 -> 지속 가능한 서비스를 제공함으로 인해 사용하는 사람에게 특정한 경험이나 가치를 제공하기 위함임(7/9)
 + 사용자 경험이란 무엇인가?
 -> 사용자가 서비스를 이용하면서 하는 총체적인 경험을 의미함(7/9)
 + 왜 사용자 경험이 중요한가?
 -> 사용자가 서비스를 이용하면서 하는 경험이 사용자가 그 서비스를 지속적으로 이용할지 여부를 결정하기 때문임(7/9) 
 
 + 여기서는 OOP의 일반적인 개념만을 살펴볼 뿐이지, 특정 언어에 국한된 내용을 이야기하지는 않음
 + OOP는 자바스크립트에 국한된 개념이 아님(7/9)
 + 왜 OOP는 자바스크립트에 국한된 개념이 아닌가?
 -> OOP는 유용한 개념이기 때문에, 자바스크립트 이외의 다양한 언어에서 활용됨(7/9)
 
 - 시작해보자면, first objects article에서 배웠던 Person 객체로 돌아가봄
 -> 거기서 "사람"에 대한 기초적인 데이터와 기능을 정의함
 -> "사람"을 구별할 수 있는 특징은 많음
    (그들의 주소, 키, 신발 사이즈, DNA프로필, 여권번호, 중요한 개인적 사실 등...)
 -> 하지만 이 예제에서는 오직 이름, 나이, 성별 그리고 취미만을 다룸(7/8) 
 -> 여기에 더불어 이 데이터를 기반으로 각 개인에 대한 간단한 소개말과 인사말을 표시할 수 있도록 함(7/8) 
 -> 이런 과정을 추상화 - 프로그래머의 의도에 맞추어 가장 중요한 것들만을 뽑아서 복잡한 것들을 
    보다 단순한 모델로 변환하는 작업- 라고 함(7/8) 
    
 + 시작해보자면, first objects article에서 배웠던 Person 객체로 돌아가봄    
 + 왜 Person 객체로 돌아가는가?
 -> Person 객체를 통해서 메소드 및 변수와 관련된 설명을 하기 위함임
 
 + 거기서 "사람"에 대한 기초적인 데이터와 기능을 정의함
 + "사람"을 구별할 수 있는 특징은 많음
 -> 그들의 주소, 키, 신발 사이즈, DNA프로필, 여권번호, 중요한 개인적 사실 등
 
 + 왜 사람을 구별하는 여러 가지 특징이 존재하는가?
 -> 현실에서 사람은 여러 가지 맥락에서 여러 가지 특징을 지닌 채 존재하는 존재이기 때문임(7/9)
 
 + 왜 이러한 특징들로 사람을 구분하는가?
 -> 이러한 특징들이 실세계의 사람을 나타내는 것임(7/9) 
 + 하지만 이 예제에서는 오직 이름, 나이, 성별 그리고 취미만을 다룸
 + 왜 이 예제에서는 오직 이름, 나이, 성별 그리고 취미만을 다루는가?
 -> 사람이 가진 특징 중에서 일부만을 특징으로서 나타내는 것임(7/9) 
 + 여기에 더불어 이 데이터를 기반으로 각 개인에 대한 간단한 소개말과 인사말을 표시할 수 있도록 함(7/9)
 -> 왜 각 개인에 대한 소개말과 인사말을 표시할 수 있도록 하는가?
 -> 각 개인에 대한 추가적인 정보를 제공하는 것임(7/9)
 
 + 이런 과정을 추상화 - 프로그래머의 의도에 맞추어 가장 중요한 것들만을 뽑아서 복잡한 것들을
                       보다 단순한 모델로 변환하는 작업 - 라고 함
 + 왜 추상화를 하는가?
 -> 중요한 정보들만을 선별적으로 관리하기 위해서임(7/9)
 + 왜 중요한 정보들만을 선별적으로 관리하고자 하는가?
 -> 데이터베이스에서 모든 정보들을 중요하게 관리할 수는 없기 때문임(7/9)
 
 ### 실제 객체 생성
 
 - 객체 인스턴스는 클래스를 통해서 만들 수 있음
 -> 객체는 클래스에 정의된 데이터와 함수를 갖음
 -> Person 클래스를 통해서 실제 '사람'객체를 생성할 수 있음
 
 - 클래스로부터 객체의 인스턴스가 생성될 때는 클래스의 생성자 함수가 호출됨(7/9) 
 -> 클래스에서 객체 인스턴스가 생성되는 일련의 과정을 인스턴스화(instantiation)라고 함(7/9)
 -> 객체의 인스턴스는 클래스를 통해 만들어짐(7/9)
 

### 특별한 클래스

- 자, 이번에는 일반적인 사람이 아니라 일반적인 사람보다 세분화된 선생님과 학생들이 필요함
-> OOP에서는 특정 클래스를 기반으로 새로운 클래스를 만들 수 있음
-> child 클래스는 부모 클래스를 상속 받아서 만들어짐(7/9) 
-> child 클래스는 상속을 통해 부모 클래스에 정의된 데이터와 함수를 고스란히 사용할 수 있음
-> 클래스마다 기능이 달라지는 부분이 있다면, 직접 해당 클래스에 원하는 기능을 정의할 수 있음
-> 정의된 각각의 기능은 서로 다른 namespace에 존재함

- 예를 들어, 학생의 인사는 "안녕, 난 [이름]이야."와 같은 형식이 될 것임
-> 반면 선생님은 "안녕하세요. 제 이름은 [성][이름]이고 [과목명]을 담당하고 있습니다"와 같이 
   좀 더 격식있는 형식을 사용할 것임(7/9)
   
+ 이제 자식 클래스들로부터 객체 인스턴스를 만들 수 있음
-> 예를 들면, 다음 부분에선, 어떻게 객체지향 프로그래밍 이론이 자바스크립트에 실제로 적용될 수 있는지
   살펴봄(7/9)
   

### 생성자와 객체 인스턴스

- 자바스크립트는 객체와 그 기능을 정의하기 위해 생성자 함수라고 불리는 특별한 함수를 사용함
-> 이는 보통 우리가 얼마나 많은 객체들을 생성해야 할지 모르기 때문에 유용함
-> 생성자는 효율적으로 필요한 만큼 객체를 생성하고, 데이터와 함수들을 설정하는 방법을 제공함(7/9)

- 생성자로부터 새로운 객체 인스턴스가 생성되면, 객체의 핵심 기능(프로토타입에 의해 정의됨)
  이 프로토타입 체인에 의해 연결됨
-> 자바스크립트에서 생성자를 이용해 클래스를 만들고, 클래스에서 객체 인스턴스를 만드는 방법을 알아봄
-> 가장 먼저, 첫 객체 글에서 보았던 oojs.html 파일을 로컬에 새로 복사함(7/9)


### 간단한 예제

- 어떻게 일반적인 함수를 이용해 한 사람을 정의할 수 있는지부터 보겠음
-> 이 함수를 script 태그 안에 추가함(7/9)

function createNewPerson(name){
   var obj = {};
   obj.name = name;
   obj.greeting = function(){
      alert('Hi! I\'m + this.name+ '.');
   };
   return obj;
}






 
    
 
 
 
 
