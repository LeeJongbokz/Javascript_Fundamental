
- 자, 이제 기초 단계를 벗어나서, 객체지향 Javascript(OOJS)을 보도록 함
-> 이 문서에서 객체지향(OOP)이론에 대한 기초를 훑어본 후,
   자바스크립트가 생성자와 함수를 통해 객체 클래스 개념을 따라했는지,
   그리고 어떻게 객체를 만드는지 알아봄(7/8)
   
 
 ### 객체지향 프로그래밍 - 기초
 
 - 객체지향 프로그래밍(OOP)의 개요를 설명하는 것으로 시작함
 -> 지금 단계에서 OOP의 모든 것을 설명하면 너무 복잡해서 혼란만을 가중시킬 것이기 때문에
    최대한 간단히 설명함
 -> OOP의 기본 컨셉은 프로그램 내에서 표현하고자 하는 실세계(real world)의 일들을
    객체를 사용해서 모델링하고, 객체를 사용하지 않으면 불가능 혹은 무지 어려웠을 일들을
    쉽게 처리하는 방법을 제공한다는 것임(7/8)
    
 - 객체는 당신이 모델링하고자 하는 일이나 기능 혹은 필요한 행동들을 표현하는 프로그램
   코드와 그와 연관된 데이터로 구성됨
 -> 객체는 데이터(그리고, 함수 역시)를 감싸서, (공식적인 표현으로는 encapsulate)
    객체 패키지(해당 객체를 참조하기 위한 이름. namespace라고도 불림)
    안에 보관함
 -> 이는 계층 구조를 만드는데 용이하고 사용하기에도 쉽게 하기 위해서임
 -> 또한, 객체는 네트워크를 통해 쉽게 전송될 수 있도록 데이터를 저장하는 용도로도 많이 사용됨(7/8)
 
 ### 객체 템플릿 정의
 
 - 자, 학교의 선생님과 학생들의 정보를 보여주는 간단한 프로그램이 있다고 침
 -> 여기서는 OOP의 일반적인 개념만을 살펴볼 뿐이지, 특정 언어에 국한된 내용을 이야기하지는 않음
 
 - 시작해보자면, first objects article에서 배웠던 Person 객체로 돌아가봄
 -> 거기서 "사람"에 대한 기초적인 데이터와 기능을 정의함
 -> "사람"을 구별할 수 있는 특징은 많음
    (그들의 주소, 키, 신발 사이즈, DNA프로필, 여권번호, 중요한 개인적 사실 등...)
 -> 하지만 이 예제에서는 오직 이름, 나이, 성별 그리고 취미만을 다룸(7/8) 
 -> 여기에 더불어 이 데이터를 기반으로 각 개인에 대한 간단한 소개말과 인사말을 표시할 수 있도록 함(7/8) 
 -> 이런 과정을 추상화 - 프로그래머의 의도에 맞추어 가장 중요한 것들만을 뽑아서 복잡한 것들을 
    보다 단순한 모델로 변환하는 작업- 라고 함(7/8) 
    
 ### 실제 객체 생성
 
 - 객체 인스턴스는 클래스를 통해서 만들 수 있음
 -> 객체는 클래스에 정의된 데이터와 함수를 갖음
 -> Person 클래스를 통해서 실제 '사람'객체를 생성할 수 있음
 
 - 클래스로부터 객체의 인스턴스가 
    
 
 
 
 
