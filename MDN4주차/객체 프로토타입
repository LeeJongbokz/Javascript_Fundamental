

- Javascript에서는 객체를 상속하기 위하여 프로토타입이라는 방식을 사용함
-> 본 문서에서는 프로토타입 체인이 동작하는 방식을 설명하고, 
   이미 존재하는 생성자에 메소드를 추가하기 위해
   프로토타입 속성을 사용하는 법을 알아봄(7/10)
   

### 프로토타입 기반 언어?

- Javascript는 흔히 프로토타입 기반 언어(prototype-based language)라 불림
-> 모든 객체들이 메소드와 속성들을 상속 받기 위한 템플릿으로써
   프로토타입 객체(prototype object)를 가진다는 의미임(7/10)
-> 프로토타입 객체도 또 다시 상위 프로토타입 객체로부터 메소드와 속성을 상속 받을 수도 있고,
   
- 정확히 말하자면 상속되는 속성과 메소드들은 각 객체가 아니라 객체의 생성자의 prototype이라는
  속성에 정의되어 있음
  
- Javascript에서는 객체 인스턴스와 프로토타입 간에 연결이 구성되며,
  이 연결을 따라 프로토타입 체인을 타고 올라가며 속성과 메소드를 탐색함(7/10)
  

### 프로토타입 객체 이해하기

- Person() 생성자를 작성했던 예제 코드를 되돌아가 봄
-> 브라우저로 예제 코드를 불러옴
-> 이전 페이지에서 작업했던 예제 코드를 날려버렸다면 oojs-class-further-exercises.html 페이지를 방문함

- 이 예제에서 생성자 함수를 정의함

function Person(first, last, age, gender, interests){

    this.first = first;
    this.last = last;
}

var person1 = new Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);

- Javascript 콘솔에서 "person1."을 치게 되면 브라우저는 아래처럼 해당 객체의 멤버 이름을 자동 완성
  팝업으로 보여줌(7/10)
  
- 위에서 person1의 프로토타입 객체인 Person()에 정의된 멤버들 - name, age, gender, interests, bio, 
  greeting을 볼 수 있음
-> 또한 watch, valueOf처럼 Person()의 프로토타입 객체인 Object에 정의된 다른 멤버들도 보실 수 있음(7/10)
-> 이는 프로토타입 체인이 동작한다는 증거임(7/10)

- 그럼 실제로는 Object에 정의되어 있는 메소드를 person1에서 호출하면 어떻게 될까?
-> 아래처럼 말임
  
  person1.valueOf()
  
  - 이 메소드는 호출된 객체의 값을 단순 반환함
  -> 직접 실행해 봄!
  
  (1) 브라우저는 우선 person1 객체가 valueOf() 메소드를 가지고 있는지 체크함
  (2) 없으므로 person1의 프로토타입 객체(Person() 생성자의 프로토타입)에 valueOf() 메소드가 있는지 체크함
  (3) 여전히 없으므로 Person() 생성자의 프로토타입 객체의 프로토타입 객체(Object() 생성자의 프로토타입)가
      valueOf() 메소드를 가지고 있는지 체크함
   -> .여기에 있으니 호출하며 끝남!
   
  - 프로토타입 체인에서 한 객체의 메소드와 속성들이 다른 객체로 복사되는 것이 아님을 재차 언급함
  -> 위에서 보시다시피 체인을 타고 올라가며 접근할 뿐임(7/10)
  

### 프로토타입 속성

- 그럼 상속 받은 속성과 메소드들은 어디에 정의되어 있을까?
-> Object 레퍼런스 페이지에 가시면 좌측에 수많은 속성과 메소드들이 나열되어 있는 것을 볼 수 있음


  
