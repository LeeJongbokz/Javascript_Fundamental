
- 객체지향프로그래밍 - 기초

객체지향 프로그래밍의 개요를 설명하는 것으로 시작하겠음
지금 단계에서 OOP의 모든 것을 설명하면 너무 복잡해서 혼란만을 가중시킬 것임
최대한 간단히 설명하겠음

OOP의 기본 컨셉은 프로그램 내에서 표현하고자 하는 실세계의 일들을 
객체를 사용해서 모델링 하고, 객체를 사용하지 않으면 불가능 혹은
무지 어려웠을 일들은 쉽게 처리하는 방법을 제공한다는 것임

객체는 당신이 모델링하고자 하는 일이나 기능 혹은 필요한 행동들을 표현하는
프로그램 코드와 그와 연관된 데이터로 구성됨

객체는 데이터(그리고 함수 역시)를 감싸서, 객체 패키지안에 보관함
-> 이는 계층 구조를 만드는데 용이하고 사용하기에도 쉽게 하기 위해서임

또한 객체는 네트워크를 통해 쉽게 전송될 수 있도록 데이터를 저장하는 용도로도 
많이 사용됨


- 객체 템플릿 정의

자, 학교의 선생님과 학생들의 정보를 보여주는 간단한 프로그램이 있다고 침
여기서는 OOP의 일반적인 개념만을 살펴볼 뿐이지,
특정 언어에 국한된 내용을 이야기하지는 않음

시작해보자면, first objects artical에서 배웠던 Person 객체로 돌아감
-> 거기서 '사람'에 대한 기초적인 데이터와 기능을 정의함
-> 사람을 구별할 수 있는 특징은 많음
   (그들의 주소, 키, 신발 사이즈, DNA 프로필, 여권번호, 중요한 개인적 사실 등)
-> 하지만 이 예제에서는 오직 이름 

- 여기에 더불어 이 데이터를 기반으로 각 개인에 대한 간단한 소개말과 인사말을 표시할 수 있음
-> 이런 과정을 추상화라고 함
-> 프로그래머의 의도에 맞추어 가장 중요한 것들만을 뽑아서 복잡한 것들을 보다
   단순한 모델로 변환하는 작업
   
- 실제 객체 생성
-> 객체 인스턴스는 클래스를 통해서 만들 수 있음
-> 객체는 클래스에 정의된 데이터와 함수를 갖음
-> Person 클래스를 통해서 실제 '사람'객체를 생성할 수 있음

- 클래스로부터 객체의 인스턴스가 생성될 때는 클래스의 생성자 함수가 호출됨
-> 클래스에서 객체 인스턴스가 생성되는 일련의 과정을 인스턴스화라고 함
-> 객체의 인스턴스는 클래스를 통해 만들어짐


- 특별한 클래스

- 자, 이번에는 일반적인 사람이 아니라 - 일반적인 사람보다 세분화된 선생님과 학생들이 필요함
-> OOP에서는, 특정 클래스를 기반으로 새로운 클래스를 만들 수 있음
-> Child 클래스는 부모 클래스를 상속 받아서 만들어짐
-> Child 클래스는 상속을 통해 부모 클래스에 정의된 데이터와 함수를 고스란히 사용할 수 있음
-> 클래스마다 기능이 달라지는 부분이 있다면, 직접 해당 클래스에 원하는 기능을 정의할 수 있음

-> 이것은 매우 유용함
-> 이름, 성별, 나이 등과 같이 선생님과 학생이 공유하는 많은 공통적인 특징들을 한 번만 정의해도
   되기 때문임
-> 또한 서로 다른 클래스에 같은 기능을 따로 정의할 수도 있음
-> 정의된 각각의 기능은 서로 다른 namespace에 존재하기 때문임
-> 예를 들어, 학생의 인사는 "안녕, 난 [이름]이야."와 같은 형식이 될 것임
-> 반면, 선생님은 "안녕하세요, 제 이름은 [성][이름]이고 [과목명]을 담당하고 있습니다."
   와 같이 좀 더 격식 있는 형식을 사용함

- 혹시 궁금해 하실까봐 말씀드리면, 여러 객체 타입에 같은 기능을 정의할 수 있는 능력을 
  멋진 용어로 '다형성(polymorphism)'이라고 함
  
- 다음 부분에선, 어떻게 객체지향 프로그래밍 이론이 자바스크립트에 실제로 적용될 수 있는지 살펴봄


  
   
- 생성자와 객체 인스턴스

- 자바스크립트는 객체와 그 기능을 정의하기 위해 생성자 함수라고 불리는 특별한 함수를 사용함
-> 이는 보통 우리가 얼마나 많은 객체들을 생성해야 할지 모르기 때문에 유용함
-> 생성자는 효율적으로 필요한 만큼 객체를 생성하고, 데이터와 함수들을 설정하는 방법을 제공함

- 생성자로부터 새로운 객체 인스턴스가 생성되면, 객체의 핵심 기능이 프로토타입 체인에 의해 연결됨

- 자바스크립트에서 생성자를 이용해 클래스를 만들고, 클래스에서 객체 인스턴스를 만드는 방법을 알아봄
-> 가장 먼저, 첫 객체 글에서 보았던 oojs.html 파일을 로컬에 새로 복사하십시오. 


- 간단한 예제

- 생성자 함수는 클래스의 자바스크립트 버전임
-> 이 함수가 함수가 가질 것 같은 모든 특징을 가지고 있지만,
   아무것도 리턴하지 않고 객체를 만들지도 않는다는 것을 깨달으셨나요?
-> 생성자 함수는 단순히 프로퍼티와 메소드를 정의함
-> 또 이를 정의할 때 this라는 키워드가 사용되고 있는 것을 볼 수 있음
-> 이것은 객체 인스턴스가 생성될 때마다, 객체의 name 프로퍼티가 생성자 함수 호출에서 
   전달된 name값과 같아질 것이라고 말하고 있음
-> greeting() 메소드 역시 생성자에서 전달된 name값을 사용함 





