https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Basics

- 이 글에서는 Javascript 객체와 관련된 기본적인 문법을 살펴보고,
  이전 코스에서 학습해서 이미 알고 있는 Javascript의 특징들과 
  우리가 이미 사용하고 있는 기능들이 이미 객체와 관련되어 있다는 사실을 
  다시 한 번 복습할 것임
  
- 목표
: 객체지향 프로그래밍에 대한 기본 이론을 이해하고,
  JavaScript에서 객체가 어떻게 처리되는지("대부분 객체임")
  학습 후, Javascript 객체를 실제로 이용하는 방법에 대해 알게되는 것을 목표로 함
  
  
- 객체 기본
: 객체는 관련된 데이터와 함수(일반적으로 여러 데이터와 함수로 이루어지는데,
  객체 안에 있을 때는 보통 프로퍼티와 메소드라고 부름)의 집합임
  예제를 통해서 실제 객체가 무엇인지 알아보도록 함 
  
  여타 Javascript의 요소들과 마찬가지로, 객체를 생성하는 것은 변수를 정의하고
  초기화하는 것으로 시작함
  -> 아래의 JavaScript 코드를 oojs.html 파일의 script tag 사이에 입력하고
     저장한 후, 리로드 해봄 
       
     var person = {};
     [object Object]
     
  여러분은 벌써 첫 번째 객체를 생성함
  -> 하지만 텅 빈 객체여서 우린 이걸로 뭘 할 수는 없음
  -> 자, 이제 오브젝트를 다음과 같이 고쳐봄 
  
     var person = {
       name: ['Bob', 'Smith'],
       age: 32,
       gender: 'male',
       interests: ['music', 'skiing'],
       bio: function(){
         alert(this.name[0]+ ' ' + this.name[1] + ' is ' + this.age + ' years old')
       },
       greeting : function(){
         alert('Hi! I\'m ' + this.name[0] + '.');
       }
    };
    
   객체는 각기 다른 이름을 갖는 복수개의 멤버로 구성됨
   -> 한 쌍의 이름과 값은 ','로 구분되야 하고, 이름과 값은 ':'으로 분리됨 
   결국 문법은 아래와 같은 패턴이 됨 
   
   var objectName = {
      member1Name: member1Value,
      member2Name: member2Value,
      member3Name: member3Value,
   };
   
   객체를 구성하는 멤버의 값은 어떤 것이라도 될 수 있음
   -> 우리가 만든 person 객체는 문자열, 숫자, 배열 두 개와 두 개의 함수를 가지고 있음
   -> 처음 4개의 아이템은 데이터 아이템인데, 이걸 객체의 프로퍼티(속성)라고 부름
   -> 끝에 두 개의 아이템은 함수인데, 이 함수를 통해 데이터를 가지고 뭔가 일을 할 수 있게 됨
   -> 이걸 우리는 메소드라고 부름
   
   이런 객체는 객체 리터럴이라고 부름
   -> 객체를 생성할 때 컨텐츠를 그대로 대입함
   -> 객체 리터럴은 클래스로부터 생성하는 방식과는 다름
   -> 이 방식은 뒤에서 살펴보게 될 것임
   
   - 객체 리터럴을 사용해서 객체를 생성하는 것은 연속된 구조체나 연관된 데이터를
     일정한 방법으로 변환하고자 할 때 많이 쓰이는 방법임
   -> 예를 들면, 서버에게 주소를 데이터베이스에 넣어 달라고 요청하는 경우임
   -> 각 아이템들을 하나 하나 개별 전송하는 것보다, 하나의 객체를 전송하는 것이
      훨씬 효율적임
   -> 또 각 아이템들을 이름으로 구분해서 사용하기 원할 때도 배열을 사용하는 것보다
      훨씬 쉬움
      
    
     
   
