
https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures

- 클로저는 함수와 함수가 선언된 어휘적 환경의 조합임
-> 클로저를 이해하려면 자바스크립트가 어떻게 변수의 유효범위(Lexical Scoping)를 
   지정하는지 먼저 이해해야 한다.
   
- 중첩된 함수는 외부 범위의 변수에 접근할 수 있음    
   
 function init(){
    // name은 init에 의해 생성된 지역 변수
    var name = "Mozilla";
    // displayName()은 내부 함수이며, 클로저 
    function displayName(){
        // 부모 함수에서 선언된 변수를 사용함
        alert(name);
    }
    
    displayName()
}




function makeFunc(){
    var name = "Mozilla";
    function displayName(){
        alert(name);
    }
    return displayName;
}
var myFunc = makeFunc()
myFunc()

-> 이 코드는 바로 전의 코드와 동일한 결과가 실행됨
   하지만 흥미로운 차이는 displayName()함수가 실행되기 전에
   외부함수인 myFunc()로부터 리턴되어 myFunc 변수에 저장된다는 것임

-> 한 눈에 봐서는 이 코드가 여전히 작동하는 것이 직관적으로 보이지 않을 수 있음
   몇몇 프로그래밍 언어에서 함수 안의 지역 변수들은 그 함수가 처리되는 동안에만 동작함
   makeFunc() 실행이 끝나면, name 변수에 더 이상 접근할 수 없게 되는 것으로 생각하는 것이
   일반적임
   
-> 하지만 위의 예시와 자바스크립트의 경우는 다름
   그 이유는 자바스크립트는 함수를 리턴하고, 리턴하는 함수가 클로저를 형성하기 때문임
   클로저는 함수와 함수가 선언된 어휘적 환경의 조합임
   이 환경은 클로저가 생성된 시점의 유효 범위 내에 있는 모든 지역 변수로 구성됨
   
-> 첫 번째 예시의 경우, myFunc은 makeFunc이 실행될 때, 
   생성된 displayName 함수의 인스턴스에 대한 참조임
    
-> displayName의 인스턴스는 변수 name이 있는 어휘적 환경에 대한 참조를 유지함
   이런 이유로 myFunc가 호출될 때, 변수 name은 사용할 수 있는 상태로 남게 되고,
   "Mozilla"가 alert에 전달됨 
   
   
   
   
   
   
   
   
   
 
